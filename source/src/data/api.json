{
    "/app/App": [
        "app.element",
        "app.ready",
        "app.readyState",
        "app.define()",
        "app.detect()",
        "app.when()",
        "app.matchElement()",
        "app.beforeInit()",
        "app.beforeUpdate()",
        "app.emit()",
        "app.isElementActive()",
        "app.halt()",
        "app: ready event"
    ],
    "/app/auth/AuthClient": [
        "AuthClient",
        "AuthClient.authType",
        "AuthClient.providerType",
        "AuthClient.init()",
        "AuthClient.handleLoginRedirect()",
        "AuthClient.login()",
        "AuthClient.logout()",
        "AuthClient.refresh()",
        "AuthClient.isHandleable()"
    ],
    "/app/auth/AuthContext": [
        "app.user",
        "app.resolveAuthProvider()",
        "app.acquireToken()",
        "app.login()",
        "app.logout()",
        "app.on()",
        "app: login event",
        "app: logout event",
        "app: sessionEnded event"
    ],
    "/app/auth/AuthProvider": [
        "AuthProvider",
        "AuthProvider.from()"
    ],
    "/app/auth/AuthProviderContext": [
        "AuthProviderContext",
        "AuthProviderContext.redirectUri",
        "AuthProviderContext.revokeSession()"
    ],
    "/app/auth/AuthProviderResult": [
        "AuthProviderResult",
        "AuthProviderResult.account",
        "AuthProviderResult.accountId",
        "AuthProviderResult.accessToken",
        "AuthProviderResult.expiresOn"
    ],
    "/app/auth/createAxiosMiddleware": [
        "createAxiosMiddleware()"
    ],
    "/app/auth/createFetchMiddleware": [
        "createFetchMiddleware()"
    ],
    "/app/auth/JSONClient": [
        "JSONClient",
        "JSONClient.baseUrl",
        "JSONClient.request()",
        "JSONClient.get()",
        "JSONClient.post()",
        "JSONClient.put()",
        "JSONClient.patch()",
        "JSONClient.delete()"
    ],
    "/app/auth/MsalAuthProvider": [
        "MsalAuthProvider",
        "MsalAuthProvider.defaultConfig",
        "MsalAuthProvider.setDefault()",
        "MsalAuthProvider.create()"
    ],
    "/app/auth/overview": [
        [
            "app.useAuth()",
            ""
        ]
    ],
    "/app/createObjectStorage": [
        "createObjectStorage()",
        [
            "ObjectStorage",
            "#s-objectstorage-interface"
        ],
        "ObjectStorage.keys()",
        "ObjectStorage.has()",
        "ObjectStorage.revive()",
        "ObjectStorage.get()",
        "ObjectStorage.set()",
        "ObjectStorage.persist()",
        "ObjectStorage.persistAll()",
        "ObjectStorage.delete()",
        "ObjectStorage.clear()",
        "ObjectStorage.registerType()"
    ],
    "/app/useI18n": [
        [
            "app.useI18n()",
            ""
        ],
        "app.language",
        "app.setLanguage()",
        "app.detectLanguage()"
    ],
    "/app/useIdleTimeout": [
        [
            "app.useIdleTimeout()",
            ""
        ],
        "app: idle event"
    ],
    "/app/useScrollable": [
        [
            "app.useScrollable()",
            ""
        ],
        "app: scrollStart event",
        "app: scrollMove event",
        "app: scrollStop event",
        "app: scrollProgressChange event",
        "app: scrollIndexChange event"
    ],
    "/devtools/HTMLConsole": [
        "HTMLConsole",
        "HTMLConsole.element",
        "HTMLConsole.log()",
        "HTMLConsole.warn()",
        "HTMLConsole.error()",
        "HTMLConsole.clear()"
    ],
    "/devtools/promptForChoice": [
        "promptForChoice()"
    ],
    "/dom/addAnimateIn": [
        "addAnimateIn()"
    ],
    "/dom/animateIn": [
        "animateIn()",
        "dom: animatein event",
        "dom: animationstart event",
        "dom: animationcomplete event"
    ],
    "/dom/animateOut": [
        "animateOut()",
        "dom: animateout event"
    ],
    "/dom/beginDrag": [
        "beginDrag()"
    ],
    "/dom/beginPinchZoom": [
        "beginPinchZoom()"
    ],
    "/dom/closeFlyout": [
        "closeFlyout()",
        "dom: flyouthide event",
        "dom: flyoutclose event"
    ],
    "/dom/createAutoCleanupMap": [
        "createAutoCleanupMap()"
    ],
    "/dom/dom-module": [
        "dom",
        "dom.event",
        "dom.pressedKey",
        "dom.metaKey",
        "dom.context",
        "dom.activeElement",
        "dom.modalElement",
        "dom.focusedElements",
        "dom.eventSource",
        "dom.root",
        "dom.ready",
        "dom.on()",
        "dom.focusable()",
        "dom.focused()",
        "dom.setTabRoot()",
        "dom.unsetTabRoot()",
        "dom.setModal()",
        "dom.releaseModal()",
        "dom.retainFocus()",
        "dom.releaseFocus()",
        "dom.focus()",
        "dom.blur()",
        "dom.reportError()"
    ],
    "/dom/initSortable": [
        "initSortable()"
    ],
    "/dom/initStickable": [
        "initStickable()",
        [
            "Stickable",
            "#s-stickable-interface"
        ],
        "Stickable.add()",
        "Stickable.dispose()"
    ],
    "/dom/insertText": [
        "insertText()"
    ],
    "/dom/keyboard-events": [
        "dom: metakeychange event",
        "dom: keystroke event"
    ],
    "/dom/observe": [
        "observe()"
    ],
    "/dom/openFlyout": [
        "openFlyout()",
        "dom: flyoutshow event"
    ],
    "/dom/pointer-events": [
        "dom: mousedown event",
        "dom: touchstart event",
        "dom: click event",
        "dom: dblclick event",
        "dom: rightClick event",
        "dom: drag event",
        "dom: longPress event",
        "dom: gesture event"
    ],
    "/dom/position": [
        "position()"
    ],
    "/dom/Positioner": [
        "Positioner",
        "Positioner.refresh()",
        "Positioner.observe()",
        "Positioner.disconnect()",
        "Positioner.setOptions()"
    ],
    "/dom/reportError": [
        "reportError()"
    ],
    "/dom/runCSSAnimation": [
        "runCSSAnimation()"
    ],
    "/dom/scrollIntoView": [
        "scrollIntoView()"
    ],
    "/dom/startPositioning": [
        "startPositioning()"
    ],
    "/dom/text-input-events": [
        "dom: textInput event"
    ],
    "/dom/toggleFlyout": [
        "toggleFlyout()"
    ],
    "/dom/watchAttributes": [
        "watchAttributes()"
    ],
    "/dom/watchElements": [
        "watchElements()"
    ],
    "/dom/watchOwnAttributes": [
        "watchOwnAttributes()"
    ],
    "/dom/ZetaEventBase": [
        "ZetaEventBase",
        "ZetaEventBase.context",
        "ZetaEventBase.currentTarget",
        "ZetaEventBase.eventName",
        "ZetaEventBase.type",
        "ZetaEventBase.target",
        "ZetaEventBase.source",
        "ZetaEventBase.sourceKeyName",
        "ZetaEventBase.data",
        "ZetaEventBase.timestamp",
        "ZetaEventBase.originalEvent",
        "ZetaEventBase.preventDefault()",
        "ZetaEventBase.isDefaultPrevented()"
    ],
    "/react/combineRef": [
        "combineRef()"
    ],
    "/react/createAsyncScope": [
        "createAsyncScope()"
    ],
    "/react/createBreakpointContext": [
        "createBreakpointContext()",
        [
            "BreakpointContext",
            "#s-breakpointcontext-interface"
        ],
        "BreakpointContext.breakpoints",
        "BreakpointContext.useBreakpoint()"
    ],
    "/react/createDependency": [
        "createDependency()",
        [
            "Dependency",
            "#s-dependency-interface"
        ],
        "Dependency.Consumer",
        "Dependency.Provider"
    ],
    "/react/createDialog": [
        "createDialog()"
    ],
    "/react/createErrorHandler": [
        "createErrorHandler()"
    ],
    "/react/data-view/DataView": [
        "DataView",
        "DataView.filters",
        "DataView.itemCount",
        "DataView.sortBy",
        "DataView.sortOrder",
        "DataView.pageIndex",
        "DataView.pageSize",
        "DataView.pageCount",
        "DataView.hasPreviousPage",
        "DataView.hasNextPage",
        "DataView.on()",
        "DataView.getView()",
        "DataView.sort()",
        "DataView.toJSON()",
        "DataView.reset()",
        "DataView.toggleSort()",
        "DataView: viewChange event"
    ],
    "/react/data-view/useDataView": [
        "useDataView()"
    ],
    "/react/dialog/DialogContext": [
        "DialogContext",
        "DialogContext.errorHandler",
        "DialogContext.closeDialog",
        "DialogContext.commitDialog",
        "DialogContext.dismissDialog"
    ],
    "/react/dialog/DialogState": [
        "DialogState",
        "DialogState.root",
        "DialogState.open()",
        "DialogState.close()"
    ],
    "/react/domEventRef": [
        "domEventRef()"
    ],
    "/react/ErrorHandler": [
        "ErrorHandler",
        "ErrorHandler.emit()",
        "ErrorHandler.catch()",
        [
            "ErrorContext",
            "#s-errorcontext-interface"
        ],
        "ErrorContext.source",
        "ErrorContext.sourceKeyName",
        "ErrorContext.sourceElement"
    ],
    "/react/form/ChoiceField": [
        "ChoiceField",
        [
            "ChoiceFieldProps",
            "#s-choicefieldprops-interface"
        ],
        "ChoiceFieldProps.items",
        "ChoiceFieldProps.allowUnselect",
        [
            "ChoiceFieldState",
            "#s-choicefieldstate-interface"
        ],
        "ChoiceFieldState.items",
        "ChoiceFieldState.selectedIndex",
        "ChoiceFieldState.selectedItem",
        [
            "ChoiceItem",
            "#s-choiceitem-interface"
        ],
        "ChoiceItem.value",
        "ChoiceItem.label",
        "ChoiceItem.hidden",
        "ChoiceItem.disabled"
    ],
    "/react/form/DateField": [
        "DateField",
        "DateField.toDateString()",
        "DateField.toDateObject()",
        [
            "DateFieldProps",
            "#s-datefieldprops-interface"
        ],
        "DateFieldProps.min",
        "DateFieldProps.max",
        "DateFieldProps.formatDisplay",
        [
            "DateFieldState",
            "#s-datefieldstate-interface"
        ],
        "DateFieldState.min",
        "DateFieldState.max",
        "DateFieldState.displayText"
    ],
    "/react/form/FieldType": [
        "FieldType",
        "FieldType.defaultValue",
        "FieldType.valueProperty",
        "FieldType.isEmpty()",
        "FieldType.normalizeValue()",
        "FieldType.postHook()"
    ],
    "/react/form/Form": [
        "<Form>"
    ],
    "/react/form/FormArray": [
        "<FormArray>"
    ],
    "/react/form/FormContext": [
        "FormContext",
        "FormContext.isValid",
        "FormContext.data",
        "FormContext.ref",
        "FormContext.autoPersist",
        "FormContext.preventLeave",
        "FormContext.validateOnChange",
        "FormContext.enterKeyHint",
        "FormContext.formatError",
        "FormContext.element()",
        "FormContext.focus()",
        "FormContext.on()",
        "FormContext.persist()",
        "FormContext.restore()",
        "FormContext.clear()",
        "FormContext.reset()",
        "FormContext.getValue()",
        "FormContext.setValue()",
        "FormContext.getErrors()",
        "FormContext.getError()",
        "FormContext.setError()",
        "FormContext.validate()",
        "FormContext.toJSON()",
        "FormContext.ERROR_FIELD",
        "FormContext.EMPTY_FIELD",
        "FormContext.get()",
        "FormContext: reset event",
        "FormContext: dataChange event",
        "FormContext: validate event",
        "FormContext: validationChange event",
        "FormContext: beforeLeave event"
    ],
    "/react/form/FormContextProvider": [
        "<FormContextProvider>"
    ],
    "/react/form/FormFieldProps": [
        "FormFieldProps",
        "FormFieldProps.name",
        "FormFieldProps.label",
        "FormFieldProps.value",
        "FormFieldProps.required",
        "FormFieldProps.disabled",
        "FormFieldProps.error",
        "FormFieldProps.showErrorMessage",
        "FormFieldProps.validateOnChange",
        "FormFieldProps.clearWhenUnmount",
        "FormFieldProps.isEmpty",
        "FormFieldProps.onValidate",
        "FormFieldProps.onChange",
        "FormFieldProps.formatError"
    ],
    "/react/form/FormFieldState": [
        "FormFieldState",
        "FormFieldState.elementRef",
        "FormFieldState.form",
        "FormFieldState.key",
        "FormFieldState.path",
        "FormFieldState.value",
        "FormFieldState.error",
        "FormFieldState.version",
        "FormFieldState.setValue()",
        "FormFieldState.setError()",
        "FormFieldState.validate()"
    ],
    "/react/form/FormObject": [
        "<FormObject>"
    ],
    "/react/form/HiddenField": [
        "<HiddenField>"
    ],
    "/react/form/MultiChoiceField": [
        "MultiChoiceField",
        [
            "MultiChoiceFieldProps",
            "#s-multichoicefieldprops-interface"
        ],
        "MultiChoiceFieldProps.items",
        "MultiChoiceFieldProps.allowCustomValues",
        [
            "MultiChoiceFieldState",
            "#s-multichoicefieldstate-interface"
        ],
        "MultiChoiceFieldState.items",
        "MultiChoiceFieldState.toggleValue()"
    ],
    "/react/form/NumericField": [
        "NumericField",
        [
            "NumericFieldProps",
            "#s-numericfieldprops-interface"
        ],
        "NumericFieldProps.min",
        "NumericFieldProps.max",
        "NumericFieldProps.step",
        "NumericFieldProps.allowEmpty",
        [
            "NumericFieldState",
            "#s-numericfieldstate-interface"
        ]
    ],
    "/react/form/TextField": [
        "TextField",
        [
            "TextFieldProps",
            "#s-textfieldprops-interface"
        ],
        "TextFieldProps.type",
        [
            "TextFieldState",
            "#s-textfieldstate-interface"
        ],
        "TextFieldState.inputProps"
    ],
    "/react/form/ToggleField": [
        "ToggleField",
        [
            "ToggleFieldProps",
            "#s-togglefieldprops-interface"
        ],
        "ToggleFieldProps.checked",
        [
            "ToggleFieldState",
            "#s-togglefieldstate-interface"
        ],
        "ToggleFieldState.toggleValue()"
    ],
    "/react/form/useFormContext": [
        "useFormContext()"
    ],
    "/react/form/useFormField": [
        "useFormField()"
    ],
    "/react/form/ValidationError": [
        "ValidationError",
        "ValidationError.kind",
        "ValidationError.message",
        "ValidationError.args"
    ],
    "/react/handleUserAction": [
        "handleUserAction()"
    ],
    "/react/i18n/getTranslation": [
        "getTranslation()"
    ],
    "/react/i18n/makeTranslation": [
        "makeTranslation()"
    ],
    "/react/i18n/translate": [
        "translate()",
        [
            "Translate",
            "#s-translate-interface"
        ],
        "Translate.lazy()",
        "Translate.html()"
    ],
    "/react/i18n/useLanguage": [
        "useLanguage()"
    ],
    "/react/i18n/useTranslation": [
        "useTranslation()"
    ],
    "/react/mixin/AnimateMixin": [
        [
            "useAnimateMixin()",
            ""
        ],
        [
            "AnimateMixin",
            "#s-animatemixin-class"
        ],
        "AnimateMixin.with()",
        "AnimateMixin.withEffects()"
    ],
    "/react/mixin/AnimateSequenceMixin": [
        [
            "useAnimateSequenceMixin()",
            ""
        ],
        [
            "AnimateSequenceMixin",
            "#s-animatesequencemixin-class"
        ],
        "AnimateSequenceMixin.item"
    ],
    "/react/mixin/ClassNameMixin": [
        "ClassNameMixin",
        "ClassNameMixin.onClassNameUpdated()"
    ],
    "/react/mixin/ClassNameToggleMixin": [
        [
            "useClassNameToggleMixin()",
            ""
        ],
        [
            "ClassNameToggleMixin",
            "#s-classnametogglemixin-class"
        ],
        "ClassNameToggleMixin.set()"
    ],
    "/react/mixin/FlyoutMixin": [
        [
            "useFlyoutMixin()",
            ""
        ],
        [
            "FlyoutMixin",
            "#s-flyoutmixin-class"
        ],
        "FlyoutMixin.element",
        "FlyoutMixin.isFlyoutOpened",
        "FlyoutMixin.animating",
        "FlyoutMixin.visible",
        "FlyoutMixin.toggle",
        "FlyoutMixin.modal",
        "FlyoutMixin.withEffects()",
        "FlyoutMixin.onOpen()",
        "FlyoutMixin.onToggleState()",
        "FlyoutMixin.onVisibilityChanged()",
        "FlyoutMixin.open()",
        "FlyoutMixin.close()",
        "FlyoutMixin.toggleSelf()",
        "FlyoutMixin.whenVisible()"
    ],
    "/react/mixin/FlyoutToggleMixin": [
        "FlyoutToggleMixin",
        "FlyoutToggleMixin.open()",
        "FlyoutToggleMixin.close()",
        "FlyoutToggleMixin.toggle()",
        "FlyoutToggleMixin.on()"
    ],
    "/react/mixin/FocusStateMixin": [
        [
            "useFocusStateMixin()",
            ""
        ],
        [
            "FocusStateMixin",
            "#s-focusstatemixin-class"
        ],
        "FocusStateMixin.for()"
    ],
    "/react/mixin/FormDevToolMixin": [
        [
            "useMixin()",
            ""
        ],
        [
            "FormDevToolMixin",
            "#s-formdevtoolmixin-class"
        ],
        "FormDevToolMixin.promptAutofill()"
    ],
    "/react/mixin/LoadingStateMixin": [
        [
            "useFocusStateMixin()",
            ""
        ],
        [
            "LoadingStateMixin",
            "#s-loadingstatemixin-class"
        ],
        "LoadingStateMixin.loading"
    ],
    "/react/mixin/Mixin": [
        "Mixin",
        "Mixin.reset()",
        "Mixin.next()",
        "Mixin.getRef()",
        "Mixin.getClassNames()",
        "Mixin.getCustomAttributes()",
        "Mixin.dispose()",
        "Mixin.watch()",
        "Mixin.watchOnce()",
        "Mixin.scrollableTarget",
        "Mixin.tabRoot",
        "Mixin.use()"
    ],
    "/react/mixin/MixinState": [
        "MixinState",
        "MixinState.element",
        "MixinState.onDispose()"
    ],
    "/react/mixin/ScrollableMixin": [
        [
            "useScrollableMixin()",
            ""
        ],
        [
            "ScrollableMixin",
            "#s-scrollablemixin-class"
        ],
        "ScrollableMixin.target",
        "ScrollableMixin.element",
        "ScrollableMixin.contentElement",
        "ScrollableMixin.pageIndex",
        "ScrollableMixin.scrolling",
        "ScrollableMixin.withOptions()",
        "ScrollableMixin.onPageIndexChanged()",
        "ScrollableMixin.destroy()",
        "ScrollableMixin.enable()",
        "ScrollableMixin.disable()",
        "ScrollableMixin.setOptions()",
        "ScrollableMixin.setStickyPosition()",
        "ScrollableMixin.refresh()",
        "ScrollableMixin.scrollPadding()",
        "ScrollableMixin.stop()",
        "ScrollableMixin.scrollLeft()",
        "ScrollableMixin.scrollTop()",
        "ScrollableMixin.scrollBy()",
        "ScrollableMixin.scrollTo()",
        "ScrollableMixin.scrollByPage()",
        "ScrollableMixin.scrollToPage()",
        "ScrollableMixin.scrollToElement()"
    ],
    "/react/mixin/ScrollIntoViewMixin": [
        [
            "useScrollIntoViewMixin()",
            ""
        ],
        [
            "ScrollIntoViewMixin",
            "#s-scrollintoviewmixin-class"
        ],
        "ScrollIntoViewMixin.when()"
    ],
    "/react/mixin/StatefulMixin": [
        "StatefulMixin",
        "StatefulMixin.ref",
        "StatefulMixin.state",
        "StatefulMixin.elements()",
        "StatefulMixin.onDispose()",
        "StatefulMixin.initState()",
        "StatefulMixin.initElement()",
        "StatefulMixin.mergeState()",
        "StatefulMixin.onLayoutEffect()",
        "StatefulMixin.onBeforeUpdate()",
        "StatefulMixin.clone()"
    ],
    "/react/mixin/StaticAttributeMixin": [
        "StaticAttributeMixin"
    ],
    "/react/mixin/UnmanagedClassNameMixin": [
        [
            "useUnmanagedClassNameMixin()",
            ""
        ],
        [
            "UnmanagedClassNameMixin",
            "#s-unmanagedclassnamemixin-class"
        ],
        "UnmanagedClassNameMixin.memorize()"
    ],
    "/react/openDeferredLink": [
        "openDeferredLink()"
    ],
    "/react/partial": [
        "partial()"
    ],
    "/react/useAnimatedIndicator": [
        "useAnimatedIndicator()",
        [
            "AnimatedIndicator",
            "#s-animatedindicator-interface"
        ],
        "AnimatedIndicator.ref",
        "AnimatedIndicator.setActiveIndex()"
    ],
    "/react/useAsync": [
        "useAsync()",
        [
            "AsyncContentState",
            "#s-asynccontentstate-interface"
        ],
        "AsyncContentState.value",
        "AsyncContentState.loading",
        "AsyncContentState.error",
        "AsyncContentState.elementRef",
        "AsyncContentState.refresh()",
        "AsyncContentState.onError()",
        "AsyncContentState.abort()",
        "AsyncContentState.reset()",
        "AsyncContentState.on()",
        "AsyncContentState: load event",
        "AsyncContentState: error event"
    ],
    "/react/useDependency": [
        "useDependency()",
        [
            "DependencyProviderContext",
            "#s-dependencyprovidercontext-interface"
        ],
        "DependencyProviderContext.value"
    ],
    "/react/useDispose": [
        "useDispose()",
        [
            "DisposeCallback",
            "#s-disposecallback-interface"
        ],
        "DisposeCallback.push()"
    ],
    "/react/useEagerReducer": [
        "useEagerReducer()"
    ],
    "/react/useEagerState": [
        "useEagerState()"
    ],
    "/react/useErrorHandler": [
        "useErrorHandler()",
        [
            "ErrorHandlerWithRef",
            "#s-errorhandlerwithref-interface"
        ],
        "ErrorHandlerWithRef.ref"
    ],
    "/react/useEventTrigger": [
        "useEventTrigger()"
    ],
    "/react/useMediaQuery": [
        "useMediaQuery()"
    ],
    "/react/useMemoizedFunction": [
        "useMemoizedFunction()"
    ],
    "/react/useObservableProperty": [
        "useObservableProperty()"
    ],
    "/react/useRefInitCallback": [
        "useRefInitCallback()"
    ],
    "/react/useSingleton": [
        "useSingleton()"
    ],
    "/react/useUnloadEffect": [
        "useUnloadEffect()"
    ],
    "/react/useUpdateTrigger": [
        "useUpdateTrigger()"
    ],
    "/react/useValueTrigger": [
        "useValueTrigger()"
    ],
    "/react/ViewStateProvider": [
        "<ViewStateProvider>",
        [
            "ViewStateProvider",
            "#s-viewstateprovider-interface"
        ],
        "ViewStateProvider.getState()",
        [
            "ViewState",
            "#s-viewstate-interface"
        ],
        "ViewState.get()",
        "ViewState.set()",
        "ViewState.onPopState()",
        "ViewState.dispose()"
    ],
    "/router/beforepageload-event": [
        [
            "BeforePageLoadEvent",
            "#s-beforepageloadevent-interface"
        ],
        "BeforePageLoadEvent.pathname",
        "BeforePageLoadEvent.oldPathname",
        "BeforePageLoadEvent.oldStateId",
        "BeforePageLoadEvent.newStateId",
        "BeforePageLoadEvent.route",
        "BeforePageLoadEvent.data",
        "BeforePageLoadEvent.navigationType",
        "BeforePageLoadEvent.waitFor()"
    ],
    "/router/create-router": [
        [
            "app.useRouter()",
            ""
        ]
    ],
    "/router/hashchange-event": [
        [
            "HashChangeEvent",
            "#s-hashchangeevent-interface"
        ],
        "HashChangeEvent.oldHash",
        "HashChangeEvent.newHash"
    ],
    "/router/navigate-event": [
        [
            "app.on()",
            ""
        ],
        [
            "NavigateEvent",
            "#s-navigateevent-interface"
        ],
        "NavigateEvent.pathname",
        "NavigateEvent.oldPathname",
        "NavigateEvent.oldStateId",
        "NavigateEvent.newStateId",
        "NavigateEvent.route",
        "NavigateEvent.data",
        "NavigateEvent.navigationType"
    ],
    "/router/NavigateResult": [
        "NavigateResult",
        "NavigateResult.id",
        "NavigateResult.path",
        "NavigateResult.navigated",
        "NavigateResult.redirected",
        "NavigateResult.originalPath"
    ],
    "/router/PageInfo": [
        "PageInfo",
        "PageInfo.pageId",
        "PageInfo.path",
        "PageInfo.params",
        "PageInfo.data",
        "PageInfo.getSavedStates()",
        "PageInfo.clearNavigateData()",
        "PageInfo.clearHistoryStorage()"
    ],
    "/router/popstate-event": [
        [
            "PopStateEvent",
            "#s-popstateevent-interface"
        ],
        "PopStateEvent.oldStateId",
        "PopStateEvent.newStateId"
    ],
    "/router/react/ErrorViewProps": [
        "ErrorViewProps",
        "ErrorViewProps.view",
        "ErrorViewProps.error",
        "ErrorViewProps.reset()"
    ],
    "/router/react/isViewMatched": [
        "isViewMatched()"
    ],
    "/router/react/isViewRendered": [
        "isViewRendered()"
    ],
    "/router/react/linkTo": [
        "linkTo()"
    ],
    "/router/react/matchView": [
        "matchView()"
    ],
    "/router/react/navigateTo": [
        "navigateTo()"
    ],
    "/router/react/redirectTo": [
        "redirectTo()"
    ],
    "/router/react/registerErrorView": [
        "registerErrorView()"
    ],
    "/router/react/registerView": [
        "registerView()"
    ],
    "/router/react/renderView": [
        "renderView()"
    ],
    "/router/react/resolvePath": [
        "resolvePath()"
    ],
    "/router/react/useQueryParam": [
        "useQueryParam()"
    ],
    "/router/react/useRouteParam": [
        "useRouteParam()"
    ],
    "/router/react/useRouteState": [
        "useRouteState()"
    ],
    "/router/react/useViewContext": [
        "useViewContext()"
    ],
    "/router/react/ViewContext": [
        "ViewContext",
        "ViewContext.parent",
        "ViewContext.container",
        "ViewContext.view",
        "ViewContext.active",
        "ViewContext.page",
        "ViewContext.getChildren()",
        "ViewContext.setErrorView()",
        "ViewContext.on()",
        "ViewContext.root",
        "ViewContext: error event",
        "ViewContext: pagechange event"
    ],
    "/router/react/ViewProps": [
        "ViewProps",
        "ViewProps.errorHandler",
        "ViewProps.viewData",
        "ViewProps.viewContext",
        "ViewProps.navigationType"
    ],
    "/router/Route": [
        "Route",
        "Route[key]",
        "Route.remainingSegments",
        "Route.parse()",
        "Route.set()",
        "Route.replace()",
        "Route.getPath()",
        "Route.toJSON()",
        "Route.toString()"
    ],
    "/router/RoutePattern": [
        "RoutePattern",
        "RoutePattern.pattern",
        "RoutePattern.params",
        "RoutePattern.exact",
        "RoutePattern.minLength",
        "RoutePattern.length",
        "RoutePattern.has()",
        "RoutePattern.match()"
    ],
    "/router/WithRouter": [
        "app.path",
        "app.basePath",
        "app.initialPath",
        "app.route",
        "app.routes",
        "app.canNavigateBack",
        "app.canNavigateForward",
        "app.previousPath",
        "app.sessionId",
        "app.sessionStorage",
        "app.cache",
        "app.page",
        "app.historyStorage",
        "app.navigate()",
        "app.back()",
        "app.backToPreviousPath()",
        "app.snapshot()",
        "app.resolvePath()",
        "app.parseRoute()",
        "app.matchRoute()",
        "app.isAppPath()",
        "app.toHref()",
        "app.fromHref()",
        "app: beforepageload event",
        "app: navigate event",
        "app: pageload event",
        "app: hashchange event",
        "app: pageenter event",
        "app: pageleave event",
        "app: popstate event"
    ],
    "/scrollable/Scrollable": [
        "Scrollable",
        "Scrollable.scrollTarget",
        "Scrollable.scrollX",
        "Scrollable.scrollY",
        "Scrollable.scrollPercentX",
        "Scrollable.scrollPercentY",
        "Scrollable.scrollMaxX",
        "Scrollable.scrollMaxY",
        "Scrollable.destroy()",
        "Scrollable.enable()",
        "Scrollable.disable()",
        "Scrollable.setOptions()",
        "Scrollable.setStickyPosition()",
        "Scrollable.refresh()",
        "Scrollable.scrollPadding()",
        "Scrollable.stop()",
        "Scrollable.scrollLeft()",
        "Scrollable.scrollTop()",
        "Scrollable.scrollBy()",
        "Scrollable.scrollTo()",
        "Scrollable.scrollByPage()",
        "Scrollable.scrollToPage()",
        "Scrollable.scrollToElement()"
    ],
    "/scrollable/ScrollableEvent": [
        "ScrollableEvent",
        "ScrollableEvent.type",
        "ScrollableEvent.trigger"
    ],
    "/scrollable/ScrollableState": [
        "ScrollableState",
        "ScrollableState.startX",
        "ScrollableState.startY",
        "ScrollableState.offsetX",
        "ScrollableState.offsetY",
        "ScrollableState.deltaX",
        "ScrollableState.deltaY",
        "ScrollableState.percentX",
        "ScrollableState.percentY",
        "ScrollableState.pageIndex",
        "ScrollableState.pageItem"
    ],
    "/scrollable/ScrollableStatic": [
        [
            "$.scrollable()",
            ""
        ],
        "$.scrollable.hook()"
    ],
    "/util/blur": [
        "blur()"
    ],
    "/util/cancelLock": [
        "cancelLock()"
    ],
    "/util/createApi": [
        "createApi()",
        [
            "ApiEventListener",
            "#s-apieventlistener-interface"
        ],
        "ApiEventListener.on()",
        "ApiEventListener: error event"
    ],
    "/util/EventContainer": [
        "ZetaEventContainer",
        "ZetaEventContainer.element",
        "ZetaEventContainer.context",
        "ZetaEventContainer.event",
        "ZetaEventContainer.autoDestroy",
        "ZetaEventContainer.normalizeTouchEvents",
        "ZetaEventContainer.captureDOMEvents",
        "ZetaEventContainer.getContexts()",
        "ZetaEventContainer.add()",
        "ZetaEventContainer.delete()",
        "ZetaEventContainer.destroy()",
        "ZetaEventContainer.emit()",
        "ZetaEventContainer.emitAsync()",
        "ZetaEventContainer.tap()",
        "ZetaEventContainer.flushEvents()"
    ],
    "/util/focus": [
        "focus()"
    ],
    "/util/focusable": [
        "focusable()"
    ],
    "/util/focused": [
        "focused()"
    ],
    "/util/fuzzyMatch": [
        "fuzzyMatch()",
        [
            "MatchableItem",
            "#s-matchableitem-interface"
        ],
        "MatchableItem.displayText",
        "MatchableItem.matchingText",
        "MatchableItem.value",
        [
            "MatchedItem",
            "#s-matcheditem-interface"
        ],
        "MatchedItem.displayText",
        "MatchedItem.formattedText",
        "MatchedItem.value"
    ],
    "/util/getContentRect": [
        "getContentRect()"
    ],
    "/util/getQueryParam": [
        "getQueryParam()"
    ],
    "/util/getRect": [
        "getRect()"
    ],
    "/util/InheritedNodeTree": [
        "InheritedNodeTree",
        "InheritedNodeTree.descendants()"
    ],
    "/util/iterateFocusPath": [
        "iterateFocusPath()"
    ],
    "/util/lock": [
        "lock()"
    ],
    "/util/locked": [
        "locked()"
    ],
    "/util/memoize": [
        "memoize()",
        "memoize.has()",
        "memoize.put()",
        "memoize.delete()",
        "memoize.clear()"
    ],
    "/util/NodeTree": [
        "NodeTree",
        "NodeTree.element",
        "NodeTree.rootNode",
        "NodeTree.getNode()",
        "NodeTree.setNode()",
        "NodeTree.removeNode()",
        "NodeTree.update()",
        "NodeTree.on()",
        "NodeTree: update event"
    ],
    "/util/notifyAsync": [
        "notifyAsync()"
    ],
    "/util/openDeferredURL": [
        "openDeferredURL()"
    ],
    "/util/preventLeave": [
        "preventLeave()"
    ],
    "/util/Rect": [
        "Rect",
        "Rect.width",
        "Rect.height",
        "Rect.centerX",
        "Rect.centerY",
        "Rect.top",
        "Rect.left",
        "Rect.right",
        "Rect.bottom",
        "Rect.collapse()",
        "Rect.translate()",
        "Rect.expand()"
    ],
    "/util/releaseFocus": [
        "releaseFocus()"
    ],
    "/util/releaseModal": [
        "releaseModal()"
    ],
    "/util/retainFocus": [
        "retainFocus()"
    ],
    "/util/runAsync": [
        "runAsync()"
    ],
    "/util/setCookie": [
        "setCookie()"
    ],
    "/util/setModal": [
        "setModal()"
    ],
    "/util/setQueryParam": [
        "setQueryParam()"
    ],
    "/util/setTabRoot": [
        "setTabRoot()"
    ],
    "/util/subscribeAsync": [
        "subscribeAsync()"
    ],
    "/util/toQueryString": [
        "toQueryString()"
    ],
    "/util/TraversableNodeTree": [
        "TraversableNodeTree",
        "TraversableNodeTree.isNodeVisible()",
        "TraversableNodeTree.acceptNode()"
    ],
    "/util/TreeWalker": [
        "TreeWalker",
        "TreeWalker.root",
        "TreeWalker.whatToShow",
        "TreeWalker.filter",
        "TreeWalker.currentNode",
        "TreeWalker.nextNode()",
        "TreeWalker.previousNode()",
        "TreeWalker.parentNode()",
        "TreeWalker.firstChild()",
        "TreeWalker.lastChild()",
        "TreeWalker.previousSibling()",
        "TreeWalker.nextSibling()"
    ],
    "/util/unsetTabRoot": [
        "unsetTabRoot()"
    ]
}