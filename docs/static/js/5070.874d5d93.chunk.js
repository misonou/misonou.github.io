"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[5070],{5070:function(e,r,n){n.r(r);var d=n(2556);function s(e){const r=Object.assign({h1:"h1",p:"p",h2:"h2",del:"del",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",a:"a",pre:"pre"},e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.h1,{children:"Deprecated APIs"}),"\n",(0,d.jsx)(r.p,{children:"These features are deprecated. They are likely to be removed in next major release."}),"\n",(0,d.jsxs)(r.h2,{children:["useErrorHandlerMixin ",(0,d.jsx)(r.del,{children:"brew-js-react"})]}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Deprecated"}),(0,d.jsx)(r.th,{children:"Removed"})]})}),(0,d.jsx)(r.tbody,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"v0.2.8"}),(0,d.jsx)(r.td,{children:"v0.3.0"})]})})]}),"\n",(0,d.jsxs)(r.p,{children:["The deprecated ",(0,d.jsx)(r.code,{children:"useErrorHandlerMixin"})," and ",(0,d.jsx)(r.code,{children:"ErrorHandlerMixin"})," is removed. Use ",(0,d.jsx)(r.a,{href:":",children:(0,d.jsx)(r.code,{children:"useErrorHandler"})})," instead."]}),"\n",(0,d.jsxs)(r.h2,{children:["useFormField(string, ...) ",(0,d.jsx)(r.del,{children:"zeta-dom-react"})]}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Deprecated"}),(0,d.jsx)(r.th,{children:"Removed"})]})}),(0,d.jsx)(r.tbody,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"v0.3.5"}),(0,d.jsx)(r.td,{children:"-"})]})})]}),"\n",(0,d.jsx)(r.p,{children:"For better tree-shaking of unused code, the field type argument now requires a constructor function."}),"\n",(0,d.jsx)(r.p,{children:"For built-in field type, use the corresponding field type constructor:"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-typescript",children:"// ---------- old ----------\r\nimport { useFormField } from 'zeta-dom-react';\r\nuseFormField('text', { /* ... */ });\r\nuseFormField('toggle', { /* ... */ });\r\nuseFormField('choice', { /* ... */ });\r\n\r\n// ---------- new ----------\r\nimport { useFormField, TextField, ToggleField, ChoiceField } from 'zeta-dom-react';\r\nuseFormField(TextField, { /* ... */ });\r\nuseFormField(ToggleField, { /* ... */ });\r\nuseFormField(ChoiceField, { /* ... */ });\n"})}),"\n",(0,d.jsxs)(r.p,{children:["To add custom field type, create a constructor function or a class implementing ",(0,d.jsx)(r.code,{children:"FieldType"})," interface:"]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-typescript",children:"// ---------- old ----------\r\nimport { registerFieldType } from 'zeta-dom-react';\r\nregisterFieldType('custom', { /* ... */ });\r\n// use\r\nuseFormField('custom', { /* ... */});\r\n\r\n// ---------- new ----------\r\nclass CustomField implements FieldType<CustomFieldProps, CustomFieldState> {\r\n    valueProperty?: string | undefined;\r\n    isEmpty(value: any): boolean {\r\n        /* ... */\r\n    }\r\n    postHook(state: FormFieldState<any>, props: CustomFieldProps): CustomState {\r\n        /* ... */\r\n    }\r\n}\r\n// use\r\nuseFormField(CustomField, { /* ... */});\n"})}),"\n",(0,d.jsxs)(r.h2,{children:["useErrorHandlerRef ",(0,d.jsx)(r.del,{children:"zeta-dom-react"})]}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Deprecated"}),(0,d.jsx)(r.th,{children:"Removed"})]})}),(0,d.jsx)(r.tbody,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"v0.3.2"}),(0,d.jsx)(r.td,{children:"-"})]})})]}),"\n",(0,d.jsx)(r.p,{children:"Equivalent to"}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-typescript",children:"useErrorHandler(source).ref\n"})})]})}r.default=function(e={}){const{wrapper:r}=e.components||{};return r?(0,d.jsx)(r,Object.assign({},e,{children:(0,d.jsx)(s,e)})):s(e)}}}]);