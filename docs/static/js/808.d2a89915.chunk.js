"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[808],{808:function(e,r,n){n.r(r);var o=n(2556);function s(e){const r=Object.assign({h1:"h1",p:"p",code:"code",a:"a",ul:"ul",li:"li",pre:"pre",h2:"h2",h3:"h3",del:"del",blockquote:"blockquote"},e.components),{Module:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n,{name:"brew-js-react"}),"\n",(0,o.jsx)(r.h1,{children:"Error handling"}),"\n",(0,o.jsxs)(r.p,{children:["When an ",(0,o.jsx)(r.code,{children:"error"})," event is dispatched to descendant elements rendered by the current view through ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"reportError"})}),",\r\n(not to confused with the native ",(0,o.jsx)(r.code,{children:"error"})," event), there are a few places such error can be caught in view-level."]}),"\n",(0,o.jsx)(r.p,{children:"In sequence:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"ErrorHandler"})})," object from ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"ViewProps.errorHandler"})})]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"onError"})," callback passed to ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"renderView"})})]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"error"})," event handler registered using ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"dom.on"})})," on view context's container element"]}),"\n"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"import { registerErrorView } from \"brew-js-react\";\r\n\r\nconst MyView = registerView(({ viewContext, errorHandler }) => {\r\n    useEffect(() => {\r\n        return errorHandler.catch(e => console.log('First!'));\r\n    }, []);\r\n    /* ... */\r\n});\r\n\r\nfunction App() {\r\n    return renderView({\r\n        onError(e, context) {\r\n            console.log('Second!');\r\n        }\r\n    }, MyView);\r\n}\n"})}),"\n",(0,o.jsx)(r.h2,{children:"Streaming errors to view context"}),"\n",(0,o.jsx)(r.h3,{children:"Data loading"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"useAsync"})})," already stream error to view context. If ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"useAsync"})})," is not preferred, see ",(0,o.jsx)(r.a,{href:"#s-asynchronous-code",children:"Asynchronous code"})," below."]}),"\n",(0,o.jsx)(r.h3,{children:"User interaction"}),"\n",(0,o.jsxs)(r.p,{children:["Wrapper callback by ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"handleUserAction"})})," will stream error to the interacted element, which eventually\r\nbubbles up to the view context."]}),"\n",(0,o.jsx)(r.h3,{children:"Asynchronous code"}),"\n",(0,o.jsxs)(r.p,{children:["In view component, use ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"ErrorHandler.emit"})})," if possible."]}),"\n",(0,o.jsxs)(r.p,{children:["For descendant (reusable) component, either having an ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"ErrorHandler"})})," registered to rendered element, using a ref, or use ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"reportError"})})," to a rendered element directly."]}),"\n",(0,o.jsxs)(r.p,{children:["If no element is rendered, use ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"useViewContext"})})," and dispatcher error to ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"ViewContext.container"})}),"."]}),"\n",(0,o.jsx)(r.h2,{children:"Bailing out from rendered view"}),"\n",(0,o.jsx)(r.p,{children:(0,o.jsx)(r.del,{children:"0.6.5"})}),"\n",(0,o.jsxs)(r.p,{children:["It is possible to bail out from original view through ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"ViewContext.setErrorView"})}),"."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:'import { registerErrorView } from "brew-js-react";\r\n\r\nconst MyView = registerView(({ viewContext }) => {\r\n    const onClick = async () => {\r\n        try {\r\n            await someAction();\r\n        } catch (error) {\r\n            viewContext.setErrorView(MyErrorView, error);\r\n        }\r\n    };\r\n    /* ... */\r\n});\r\n\r\nfunction MyErrorView(props: ErrorViewProps) {\r\n    return (\r\n        <p>Oops!</p>\r\n    );\r\n}\n'})}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsxs)(r.p,{children:["Note that the view passed to ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"ViewContext.setErrorView"})})," is can be different to the once\r\npassed to ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"registerErrorView"})}),"."]}),"\n"]}),"\n",(0,o.jsxs)(r.p,{children:["When using ",(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"useAsync"})}),", error is already emitted through ",(0,o.jsx)(r.code,{children:"errorHandler"}),":"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-javascript",children:"registerView(({ viewContext, errorHandler }) => {\r\n    const [data] = useAsync(getSomeData, []);\r\n    useEffect(() => {\r\n        return errorHandler.catch(e => {\r\n            return viewContext.setErrorView(SomeErrorView, e);\r\n        });\r\n    }, []);\r\n    /* ... */\r\n});\n"})}),"\n",(0,o.jsx)(r.h2,{children:"Uncaught error during rendering"}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.a,{href:":",children:(0,o.jsx)(r.code,{children:"registerErrorView"})})," allows a fallback view to be rendered when view component failed to be imported or render."]}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsx)(r.p,{children:"View container itself is an error boundary. That means when view component failed to render, only content in view container is cleared."}),"\n"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:'import { registerErrorView } from "brew-js-react";\r\n\r\nregisterErrorView(({ error, reset }) => {\r\n    return (\r\n        <p>Oops!</p>\r\n    );\r\n});\n'})}),"\n",(0,o.jsx)(r.h2,{children:"Recovering from error view"}),"\n",(0,o.jsxs)(r.p,{children:["The ",(0,o.jsx)(r.code,{children:"reset"})," callback in ",(0,o.jsx)(r.code,{children:"ErrorViewProps"})," allows rerendering of the original view that causes the error:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:"function MyErrorView({ error, reset }: ErrorViewProps) {\r\n    return (\r\n        <div>\r\n            <p>Oops!</p>\r\n            <button onClick={reset}>Reload page</button>\r\n        </div>\r\n    );\r\n};\n"})})]})}r.default=function(e={}){const{wrapper:r}=e.components||{};return r?(0,o.jsx)(r,Object.assign({},e,{children:(0,o.jsx)(s,e)})):s(e)}}}]);