"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[1352],{1352:function(e,r,s){s.r(r);var n=s(2556);function t(e){const r=Object.assign({h1:"h1",h3:"h3",code:"code",p:"p",ul:"ul",li:"li"},e.components),{Module:s,WaterpipeExample:t}=r;return s||a("Module",!0),t||a("WaterpipeExample",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s,{name:"waterpipe"}),"\n",(0,n.jsx)(r.h1,{children:"String functions"}),"\n",(0,n.jsx)(r.h3,{children:(0,n.jsx)(r.code,{children:"concat (&)"})}),"\n",(0,n.jsx)(r.p,{children:"Concatenates the piped value with the given string."}),"\n",(0,n.jsx)(t,{data:{value:"foo"},examples:["value & bar"]}),"\n",(0,n.jsx)(r.h3,{children:(0,n.jsx)(r.code,{children:"replace"})}),"\n",(0,n.jsx)(r.p,{children:"Replaces the matched substring."}),"\n",(0,n.jsx)(r.p,{children:"If a regular expression and a pipe is supplied as its arguments, the pipe will have access to the following:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"0"})," the matched substring,"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"1"}),"...",(0,n.jsx)(r.code,{children:"n"})," matched substrings of parenthesized sub-patterns in order,"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"index"})," the position of the matched substring, and"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"input"})," of the input string."]}),"\n"]}),"\n",(0,n.jsx)(t,{data:{value:"foo/bar/baz"},examples:["value replace / -","value replace /(w)(w*)/g [ $0 upper concat $1 ]"]}),"\n",(0,n.jsx)(r.h3,{children:(0,n.jsx)(r.code,{children:"substr"})}),"\n",(0,n.jsx)(r.p,{children:"Extracts a substring of the piped value."}),"\n",(0,n.jsx)(t,{data:{value:"foo/bar/baz"},examples:["value substr 0 3"]}),"\n",(0,n.jsxs)(r.h3,{children:[(0,n.jsx)(r.code,{children:"trim"}),", ",(0,n.jsx)(r.code,{children:"trimstart"}),", ",(0,n.jsx)(r.code,{children:"trimend"})]}),"\n",(0,n.jsx)(r.p,{children:"Trims spaces from both start and end, or either end of a string."}),"\n",(0,n.jsx)(t,{data:{value:" foobar "},examples:["value trim","value trimstart","value trimend"]}),"\n",(0,n.jsxs)(r.h3,{children:[(0,n.jsx)(r.code,{children:"padstart"}),", ",(0,n.jsx)(r.code,{children:"padend"}),", ",(0,n.jsx)(r.code,{children:"removestart"}),", ",(0,n.jsx)(r.code,{children:"removeend"})]}),"\n",(0,n.jsx)(r.p,{children:"Pads or removes the given substring to or from either end of a string."}),"\n",(0,n.jsx)(t,{data:{foo:"baz",bar:"/baz"},examples:["foo padstart /","bar padstart /","foo removestart /","bar removestart /"]}),"\n",(0,n.jsxs)(r.h3,{children:[(0,n.jsx)(r.code,{children:"cutbefore"}),", ",(0,n.jsx)(r.code,{children:"cutbeforelast"}),", ",(0,n.jsx)(r.code,{children:"cutafter"}),", ",(0,n.jsx)(r.code,{children:"cutafterlast"})]}),"\n",(0,n.jsx)(r.p,{children:"Extracts a substring before or after the first or last occurrence of a given substring."}),"\n",(0,n.jsx)(t,{data:{value:"foo/bar/baz"},examples:["value cutbefore /","value cutbeforelast /","value cutafter /","value cutafterlast /"]}),"\n",(0,n.jsx)(r.h3,{children:(0,n.jsx)(r.code,{children:"split"})}),"\n",(0,n.jsx)(r.p,{children:"Splits the string by the separater and removes empty entries."}),"\n",(0,n.jsx)(t,{data:{value:"foo/bar/baz"},examples:["value split /"]}),"\n",(0,n.jsx)(r.h3,{children:(0,n.jsx)(r.code,{children:"repeat"})}),"\n",(0,n.jsx)(r.p,{children:"Repeats the string with the given number of times."}),"\n",(0,n.jsx)(t,{data:{count:3},examples:["count repeat foo"]}),"\n",(0,n.jsxs)(r.h3,{children:[(0,n.jsx)(r.code,{children:"upper"}),", ",(0,n.jsx)(r.code,{children:"lower"}),", ",(0,n.jsx)(r.code,{children:"ucfirst"}),", ",(0,n.jsx)(r.code,{children:"lcfirst"})]}),"\n",(0,n.jsx)(r.p,{children:"Converts the string to an uppercased or lowercased string."}),"\n",(0,n.jsx)(t,{data:{foo:"foo",bar:"BAR"},examples:["foo upper","bar lower","foo ucfirst","bar lcfirst"]}),"\n",(0,n.jsx)(r.h3,{children:(0,n.jsx)(r.code,{children:"hyphenate"})}),"\n",(0,n.jsx)(r.p,{children:"Converts camel-cased string to hyphenated form."}),"\n",(0,n.jsx)(t,{data:{value:"camelCaseString"},examples:["value hyphenate"]}),"\n",(0,n.jsx)(r.h3,{children:(0,n.jsx)(r.code,{children:"length"})}),"\n",(0,n.jsx)(r.p,{children:"Gets the length of the array or string."}),"\n",(0,n.jsx)(t,{data:{value:"foo"},examples:["value length"]})]})}function a(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}r.default=function(e={}){const{wrapper:r}=e.components||{};return r?(0,n.jsx)(r,Object.assign({},e,{children:(0,n.jsx)(t,e)})):t(e)}}}]);