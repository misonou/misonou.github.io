"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[6678],{6678:function(n,e,r){r.r(e);var t=r(2556);function a(n){const e=Object.assign({h1:"h1",p:"p",pre:"pre",code:"code",h2:"h2"},n.components),{Module:r}=e;return r||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r,{name:"zeta-dom-react"}),"\n",(0,t.jsx)(e.h1,{children:"Validators"}),"\n",(0,t.jsx)(e.p,{children:"It may be more convenient to have validator factory that intake parameters and returns a validation callback:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"export function pattern(pattern: string) {\r\n    return (value: string) => {\r\n        return new RegExp(`^${pattern}$`).test(value) ? '' :  'Invalid pattern';\r\n    };\r\n}\r\n\r\n<TextInput onValidate={combineValidators(required, pattern('\\\\d'))}>\n"})}),"\n",(0,t.jsx)(e.h2,{children:"Combining validators"}),"\n",(0,t.jsx)(e.p,{children:"The returning value for validation success or failure makes it very easy to chain validations:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"function required() {\r\n    return (value: string) => value ? '' : 'Value required';\r\n}\r\n\r\nfunction minLength(len: number) {\r\n    return (value: string) => value.length >= len ? '' : 'Too short';\r\n}\r\n\r\n<TextInput onValidate={combineValidators(required(), minLength(10))} />\n"})}),"\n",(0,t.jsx)(e.h2,{children:"Parameterizing validations"}),"\n",(0,t.jsx)(e.p,{children:"By validator factory and combining validators, it will be easy to parameterize common validations:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:"interface TextInputProps extends FormFieldProps<string> {\r\n    required?: boolean;\r\n    maxLength?: number;\r\n    pattern?: string;\r\n}\r\n\r\nfunction TextInput(props: TextInputProps) {\r\n    props = {\r\n        ...props,\r\n        onValidate: combineValidators(\r\n            props.required && validator.required(),\r\n            props.maxLength && validator.maxLength(props.maxLength),\r\n            props.pattern && validator.pattern(props.pattern),\r\n            props.onValidate\r\n        )\r\n    }\r\n    const { value, error } = useFormField(props, '');\r\n    /* ... */\r\n}\n"})}),"\n",(0,t.jsx)(e.p,{children:"That consumer can simply do:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-tsx",children:'<TextInput required minLength="10" pattern="\\\\d+" />\n'})})]})}e.default=function(n={}){const{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(a,n)})):a(n)}}}]);