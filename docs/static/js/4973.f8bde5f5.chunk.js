"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[4973],{4973:function(e,r,n){n.r(r);var i=n(2556);function o(e){const r=Object.assign({h1:"h1",p:"p",ul:"ul",li:"li",h2:"h2",code:"code",a:"a",pre:"pre",blockquote:"blockquote"},e.components),{Module:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n,{name:"@misonou/brew-extension-auth"}),"\n",(0,i.jsx)(r.h1,{children:"Authentication providers"}),"\n",(0,i.jsx)(r.p,{children:"Currently supported single sign-on providers:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Password authentication using fetch"}),"\n",(0,i.jsx)(r.li,{children:"MSAL.js (Microsoft Entra ID)"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Working on:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"generic OAuth2 client"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{children:"Password authentication"}),"\n",(0,i.jsxs)(r.p,{children:["Now it is easily implementable with ",(0,i.jsx)(r.code,{children:"AuthProvider"})," and ",(0,i.jsx)(r.code,{children:"JSONClient"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["Examples are in use ",(0,i.jsx)(r.a,{href:"https://github.com/misonou/brew-extension-auth/tree/master/src/examples",children:(0,i.jsx)(r.code,{children:"src/examples"})})," folder."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"import { AuthProvider } from \"@misonou/brew-extension-auth\";\r\n\r\napp.useAuth({\r\n    providers: [\r\n        AuthProvider.from('my', new MyClient())\r\n    ],\r\n    /* ... */\r\n});\n"})}),"\n",(0,i.jsx)(r.h2,{children:"MSAL.js"}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:["Requires to install ",(0,i.jsx)(r.a,{href:"https://www.npmjs.com/package/@azure/msal-browser",children:(0,i.jsx)(r.code,{children:"@azure/msal-browser"})}),"."]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"The simplest way to create a provider is to have your client ID, authority and scopes:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"import MsalAuthProvider from \"@misonou/brew-extension-auth/msal\";\r\n\r\nMsalAuthProvider.create('microsoft',\r\n    clientId, // Client ID on App registration\r\n    'https://login.microsoftonline.com/common', // can be organizations or your tenant's authority\r\n    ['openid', 'profile']);\n"})}),"\n",(0,i.jsx)(r.p,{children:"The MSAL applications will be initialized with default configuration:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// it must be before calling MsalAuthProvider.create\r\nMsalAuthProvider.setDefault({\r\n    auth: { /* ... */ },\r\n    cache: { /* ... */ },\r\n    logging: { /* ... */ },\r\n    telemetry: { /* ... */ }\r\n});\n"})}),"\n",(0,i.jsx)(r.p,{children:"You can also create provider with more flexibility by creating PCA yourself:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"import { PublicClientApplication } from \"@azure/msal-browser\";\r\nimport MsalAuthProvider from \"@misonou/brew-extension-auth/msal\";\r\n\r\nMsalAuthProvider.create('microsoft',\r\n    new PublicClientApplication({ /* ... */ }),\r\n    { scopes: ['openid', 'profile'] });\n"})}),"\n",(0,i.jsx)(r.h2,{children:"Using multiple providers"}),"\n",(0,i.jsxs)(r.p,{children:["When there are multiple providers, either ",(0,i.jsx)(r.code,{children:"provider"})," or ",(0,i.jsx)(r.code,{children:"loginHint"})," must be provided to ",(0,i.jsx)(r.code,{children:"app.login"})," so that\r\nthe correct provider can be resolved."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// setup\r\napp.useAuth({\r\n    providers: [\r\n        MsalAuthProvider.create('microsoft1', clientId1, authority1, scopes),\r\n        MsalAuthProvider.create('microsoft2', clientId2, authority2, scopes),\r\n    ],\r\n    /* ... */\r\n});\r\n\r\n// login\r\napp.login({ provider: 'microsoft1' }); //or\r\napp.login({ loginHint: 'test@tenant-domain1.com' });\n"})}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsx)(r.p,{children:"Note that the first suitable provider will be picked, therefore\r\nprovider that accept all login IDs should be put at last."}),"\n"]})]})}r.default=function(e={}){const{wrapper:r}=e.components||{};return r?(0,i.jsx)(r,Object.assign({},e,{children:(0,i.jsx)(o,e)})):o(e)}}}]);