"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[5961],{5961:function(e,n,r){r.r(n);var o=r(2556);function l(e){const n=Object.assign({h1:"h1",p:"p",code:"code",ul:"ul",li:"li",h2:"h2",pre:"pre",blockquote:"blockquote"},e.components),{Module:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r,{name:"zeta-dom-react"}),"\n",(0,o.jsx)(n.h1,{children:"Unnamed field"}),"\n",(0,o.jsxs)(n.p,{children:["Any field, i.e. one using te ",(0,o.jsx)(n.code,{children:"useFormField"})," hook, can be used as unnamed field."]}),"\n",(0,o.jsx)(n.p,{children:"For an unnamed field:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["value is solely controlled by the ",(0,o.jsx)(n.code,{children:"value"})," prop, i.e. it must be used as a controlled field"]}),"\n",(0,o.jsx)(n.li,{children:"no validation is triggered"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Therefore, any form controls can be used without a form context, or as constituent control of a composite control."}),"\n",(0,o.jsx)(n.h2,{children:"Use without form context"}),"\n",(0,o.jsx)(n.p,{children:"For example a text field can serve as a search box without parent form:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"function SearchBox() {\r\n    const [value, setValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        // perform search\r\n    }, [value]);\r\n\r\n    return (\r\n        <TextField value={value} onChange={setValue} />\r\n    );\r\n}\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"An unnamed field always behaves as if there is no form context."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{children:"Composite control"}),"\n",(0,o.jsx)(n.p,{children:"Some type of control requires multiple constituent controls to perform the logic, for example a multiple checkbox list:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'export function CheckboxList(props: MultiChoiceFieldProps<CheckboxItem>) {\r\n    const { items, value, error, toggleValue, elementRef } = useFormField(MultiChoiceField, props);\r\n    return (\r\n        <div ref={elementRef}>\r\n            <span>{props.label}</span>\r\n            {items.map((v, i) => (\r\n                <label key={i}>\r\n                    <Checkbox checked={value.includes(v.value)} onChange={() => toggleValue(v.value)} />\r\n                    <span>{v.label}</span>\r\n                </label>\r\n            ))}\r\n            {error && props.showErrorMessage !== false &&\r\n                <div className="error">{error}</div>}\r\n        </div>\r\n    );\r\n}\n'})})]})}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(l,e)})):l(e)}}}]);