"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[2235],{2235:function(e,n,r){r.r(n);var s=r(2556);function c(e){const n=Object.assign({h1:"h1",p:"p",pre:"pre",code:"code",h2:"h2",h3:"h3",h4:"h4",a:"a",ul:"ul",li:"li",strong:"strong"},e.components),{Module:r,ImportHint:c,MemberList:a,VersionTimeline:o,Badge:i}=n;return i||d("Badge",!1),i.Optional||d("Badge.Optional",!0),i.ReadOnly||d("Badge.ReadOnly",!0),c||d("ImportHint",!0),a||d("MemberList",!0),r||d("Module",!0),o||d("VersionTimeline",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r,{name:"zeta-dom-react"}),"\n",(0,s.jsx)(n.h1,{children:"useDependency"}),"\n",(0,s.jsx)(n.p,{children:"Gets data sent from producer or sends data to consumer."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const dependency = createDependency(defaultValue);\r\n\r\nfunction Provider() {\r\n    useDependency(dependency.Provider, produceSomeValue());\r\n    /* ... */\r\n}\r\n\r\nfunction Consumer() {\r\n    const value = useDependency(dependency);\r\n    /* ... */\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"useDependency(dependency)\r\nuseDependency(dependency, value)\r\nuseDependency(dependency, value, deps)\r\nuseDependency(dependency, factory)\r\nuseDependency(dependency, factory, deps)\n"})}),"\n",(0,s.jsx)(c,{name:"useDependency",module:"zeta-dom-react",require:"useDependency",global:"zeta.react.useDependency"}),"\n",(0,s.jsx)(n.h3,{children:"Parameters"}),"\n",(0,s.jsxs)("dl",{children:[(0,s.jsx)(n.h4,{children:(0,s.jsx)(n.code,{children:"dependency"})}),(0,s.jsxs)(n.p,{children:["A dependency consumer or provider object returned from ",(0,s.jsx)(n.a,{href:":",children:(0,s.jsx)(n.code,{children:"createDependency"})}),"."]}),(0,s.jsx)(n.h4,{children:(0,s.jsx)(n.code,{children:"value"})}),(0,s.jsx)(n.p,{children:"Data to be sent to consumer."}),(0,s.jsx)(n.h4,{children:(0,s.jsx)(n.code,{children:"factory"})}),(0,s.jsx)(n.p,{children:"A callback that computes data to be sent to consumer."}),(0,s.jsxs)(n.h4,{children:[(0,s.jsx)(n.code,{children:"deps"})," ",(0,s.jsx)(i.Optional,{})]}),(0,s.jsx)(n.p,{children:"If present, new data is only sent to consumer if the values in the list change."})]}),"\n",(0,s.jsx)(n.h3,{children:"Return value"}),"\n",(0,s.jsx)(n.p,{children:"Either the following is returned:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"data sent from provider as consumer; or"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:":",children:(0,s.jsx)(n.code,{children:"DependencyProviderContext"})})," object as provider."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{children:"Using dependency list in provider"}),"\n",(0,s.jsx)(n.p,{children:"By default, provider will notify consumer if the supplied value is a different value or object."}),"\n",(0,s.jsx)(n.p,{children:"When passing an object literal on the fly for composite state, it is recommended to also\r\npass a dependency list to reduce re-rendering of the consumer component:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function Producer() {\r\n    const data = useState(someData);\r\n    const action = () => { /* ... */};\r\n\r\n    // it is important to pass data in dependency list\r\n    // otherwise consumer will rerender every time after producer\r\n    useDependency(dependency.Provider, { data, action }, [data]);\r\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When passing data involving callback, same constraint applys as if using ",(0,s.jsx)(n.a,{href:":",children:(0,s.jsx)(n.code,{children:"useEffect"})})," or other hook:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"function Producer() {\r\n    const memoCallback = useCallback(() => { /* ... */ }, [ /* ... */ ]);\r\n    const newCallbackEveryTime = () => { /* ... */ };\r\n\r\n    // safe, as memoCallback is stable\r\n    useDependency(dependency.Provider, memoCallback);\r\n\r\n    // not optimal as consumer will rerender every time after producer\r\n    useDependency(dependency.Provider, newCallbackEveryTime);\r\n\r\n    // safe, where newCallbackEveryTime depends on someDep\r\n    useDependency(dependency.Provider, newCallbackEveryTime, [someDep]);\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{children:"Using factory callback in provider"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"useDependency"})," can also take a factory callback with dependency list as a shorthand:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"useDependency(dependency.Provider, () => someValue, [someDep]);\n"})}),"\n",(0,s.jsx)(n.p,{children:"is the same as"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const value = useMemo(() => someValue, [someDep]);\r\nuseDependency(dependency.Provider, value);\n"})}),"\n",(0,s.jsx)(n.h2,{children:"DependencyProviderContext interface"}),"\n",(0,s.jsx)(a,{i:"DependencyProviderContext",ip:["value"]}),"\n",(0,s.jsxs)(n.h3,{children:[(0,s.jsx)(n.code,{children:"DependencyProviderContext.value"})," ",(0,s.jsx)(i.ReadOnly,{})]}),"\n",(0,s.jsx)(n.p,{children:"Gets the data passed in."}),"\n",(0,s.jsx)(n.h2,{children:"Version information"}),"\n",(0,s.jsx)(o,{module:"zeta-dom-react",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"0.5.6"})," Introduced"]}),"\n"]})}),"\n",(0,s.jsx)(n.h2,{children:"See also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:":",children:(0,s.jsx)(n.code,{children:"createDependency"})})}),"\n"]})]})}function d(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(c,e)})):c(e)}}}]);