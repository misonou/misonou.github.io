"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[3981],{3981:function(e,r,t){t.r(r);var s=t(2556);function d(e){const r=Object.assign({h1:"h1",del:"del",p:"p",a:"a",code:"code",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",pre:"pre"},e.components),{Module:t}=r;return t||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t,{name:"zeta-dom-react"}),"\n",(0,s.jsxs)(r.h1,{children:["Field types ",(0,s.jsx)(r.del,{children:"v0.3.2"})]}),"\n",(0,s.jsx)(r.p,{children:"Field types abstracts logic away from the control component."}),"\n",(0,s.jsx)(r.p,{children:"It is useful for writing field with the same logic with different visual representation,\r\nfor example a checkbox v.s. a toggle, or a dropdown v.s. tabs."}),"\n",(0,s.jsxs)(r.p,{children:["When passed to ",(0,s.jsx)(r.a,{href:":",children:(0,s.jsx)(r.code,{children:"useFormField"})}),", it returns extra members that facilitate the working\r\nof such kind of fields."]}),"\n",(0,s.jsx)(r.h2,{children:"Built-in field types"}),"\n",(0,s.jsx)(r.p,{children:"There are six built-in field types:"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Class"}),(0,s.jsx)(r.th,{children:"Usage"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:":",children:(0,s.jsx)(r.code,{children:"TextField"})})}),(0,s.jsx)(r.td,{children:"Text box"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:":",children:(0,s.jsx)(r.code,{children:"ToggleField"})})}),(0,s.jsx)(r.td,{children:"Checkbox, toggle"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:":",children:(0,s.jsx)(r.code,{children:"ChoiceField"})})}),(0,s.jsx)(r.td,{children:"Dropdown, tabs"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:":",children:(0,s.jsx)(r.code,{children:"MultiChoiceField"})})}),(0,s.jsx)(r.td,{children:"Checkbox list, multi-select dropdown"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:":",children:(0,s.jsx)(r.code,{children:"NumericField"})})}),(0,s.jsx)(r.td,{children:"Number input, slider"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.a,{href:":",children:(0,s.jsx)(r.code,{children:"DateField"})})}),(0,s.jsx)(r.td,{children:"Date picker"})]})]})]}),"\n",(0,s.jsx)(r.h2,{children:"Writing field type"}),"\n",(0,s.jsxs)(r.p,{children:["To create new field type, one can derive from existing field types or\r\ncreate a new class that implements the ",(0,s.jsx)(r.a,{href:":",children:(0,s.jsx)(r.code,{children:"FieldType"})})," interface."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"class MyFieldType implements FieldType<MyFieldTypeProp, MyFieldTypeState> {\r\n    postHook(state) {\r\n        return state;\r\n    }\r\n}\r\n\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"useFormField(MyFieldType, props); // return MyFieldTypeState\n"})})]})}r.default=function(e={}){const{wrapper:r}=e.components||{};return r?(0,s.jsx)(r,Object.assign({},e,{children:(0,s.jsx)(d,e)})):d(e)}}}]);