"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[1649],{1649:function(e,n,r){r.r(n);var s=r(2556);function t(e){const n=Object.assign({h1:"h1",p:"p",code:"code",pre:"pre",h2:"h2",h3:"h3",blockquote:"blockquote",strong:"strong"},e.components),{Module:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r,{name:"zeta-dom"}),"\n",(0,s.jsx)(n.h1,{children:"Disposables"}),"\n",(0,s.jsx)(n.p,{children:"Disposables is a pattern that for undoable actions, or actions that require cleanups, an parameterless unregister callback is returned for such purpose."}),"\n",(0,s.jsx)(n.p,{children:"Instead of holding infomation required to undo the action, unregistering callbacks can be easily combined and be passed around."}),"\n",(0,s.jsxs)(n.p,{children:["A common example would be ",(0,s.jsx)(n.code,{children:"setTimeout"})," and ",(0,s.jsx)(n.code,{children:"clearTimeout"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { setTimeout } from "zeta-dom/util";\r\n\r\nconst dispose = setTimeout(() => { /* ... */ });\r\n\r\n// somewhere else\r\n// calling clearTimeout under the hook\r\ndispose();\n'})}),"\n",(0,s.jsx)(n.h2,{children:"Combining disposables"}),"\n",(0,s.jsx)(n.p,{children:"Unregistering callback can be combined easily as the signature is identical:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { bind } from "zeta-dom/domUtil";\r\nimport { combineFn, setTimeout } from "zeta-dom/util";\r\n\r\nconst dispose = combineFn(\r\n    setTimeout(() => { /* ... */ }),\r\n    bind(window, \'click\', () => { /* ... */ })\r\n);\r\n\r\n// somewhere else\r\n// clear scheduled timers and remove event listener together\r\ndispose();\n'})}),"\n",(0,s.jsx)(n.h2,{children:"Timers"}),"\n",(0,s.jsx)(n.h3,{children:(0,s.jsx)(n.code,{children:"setTimeout"})}),"\n",(0,s.jsxs)(n.p,{children:["Equivalent to ",(0,s.jsx)(n.code,{children:"window.setTimeout"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { setTimeout } from "zeta-dom/util";\r\n\r\nconst dispose = setTimeout(() => { /* ... */ });\r\n\r\n// somewhere else\r\n// calling clearTimeout under the hook\r\ndispose();\n'})}),"\n",(0,s.jsx)(n.h3,{children:(0,s.jsx)(n.code,{children:"setInteval"})}),"\n",(0,s.jsxs)(n.p,{children:["Equivalent to ",(0,s.jsx)(n.code,{children:"window.setInteval"}),"."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Important:"})," It is recommand to use ",(0,s.jsx)(n.code,{children:"setIntevalSafe"})," for async operation."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { setInteval } from "zeta-dom/util";\r\n\r\nconst dispose = setInteval(() => { /* ... */ }, 1000);\r\n\r\n// somewhere else\r\n// calling clearInteval under the hook\r\ndispose();\n'})}),"\n",(0,s.jsx)(n.h3,{children:(0,s.jsx)(n.code,{children:"setIntevalSafe"})}),"\n",(0,s.jsxs)(n.p,{children:["Like ",(0,s.jsx)(n.code,{children:"window.setInteval"}),", but the next run is not scheduled until current operation completes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { setIntevalSafe } from "zeta-dom/util";\r\n\r\nconst dispose = setIntevalSafe(() => { \r\n    return longOperationReturningPromise();\r\n}, 1000);\r\n\r\n// somewhere else\r\n// calling clearTimeout under the hook\r\ndispose();\n'})}),"\n",(0,s.jsx)(n.h2,{children:"Native DOM events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const unbind = bind(window, {\r\n    click(e) {/* ... */},\r\n    keypress(e) {/* ... */},\r\n});\r\n\r\ndoSomeLongTask().then(() => {\r\n    unbind();\r\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By such, when ",(0,s.jsx)(n.code,{children:"unbind"})," is called, the two event listeners will be removed from DOM."]}),"\n",(0,s.jsx)(n.h2,{children:"Property observer"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"watch"})," function returns an unregistering callback that unwatches the property."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// listen obj.prop until value becomes 2\r\nconst unbind = watch(obj, 'prop', (value) => {\r\n    if (value === 2) {\r\n        unbind();\r\n    }\r\n});\n"})})]})}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(t,e)})):t(e)}}}]);