"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[6678],{6678:function(e,n,r){r.r(n);var t=r(2556);function a(e){const n=Object.assign({h1:"h1",p:"p",pre:"pre",code:"code",h2:"h2",ul:"ul",li:"li",a:"a"},e.components),{Module:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r,{name:"zeta-dom-react"}),"\n",(0,t.jsx)(n.h1,{children:"Validators"}),"\n",(0,t.jsx)(n.p,{children:"It may be more convenient to have validator factory that intake parameters and returns a validation callback:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"export function pattern(pattern: string) {\r\n    return (value: string) => {\r\n        return new RegExp(`^${pattern}$`).test(value) ? '' :  'Invalid pattern';\r\n    };\r\n}\r\n\r\n<TextInput onValidate={combineValidators(required, pattern('\\\\d'))}>\n"})}),"\n",(0,t.jsx)(n.h2,{children:"Combining validators"}),"\n",(0,t.jsx)(n.p,{children:"The returning value for validation success or failure makes it very easy to chain validations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"function required() {\r\n    return (value: string) => value ? '' : 'Value required';\r\n}\r\n\r\nfunction minLength(len: number) {\r\n    return (value: string) => value.length >= len ? '' : 'Too short';\r\n}\r\n\r\n<TextInput onValidate={combineValidators(required(), minLength(10))} />\n"})}),"\n",(0,t.jsx)(n.h2,{children:"See also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/docs/react/form/parameterizing-validations",children:"Parameterizing validations"})}),"\n"]})]})}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(a,e)})):a(e)}}}]);