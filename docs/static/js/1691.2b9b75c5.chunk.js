"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[1691],{1691:function(e,i,r){r.r(i);var n=r(2556);function l(e){const i=Object.assign({h1:"h1",p:"p",code:"code",a:"a",h2:"h2",h3:"h3",ul:"ul",li:"li",strong:"strong"},e.components),{Module:r,ImportHint:l,MemberList:t,VersionTimeline:c}=i;return l||s("ImportHint",!0),t||s("MemberList",!0),r||s("Module",!0),c||s("VersionTimeline",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r,{name:"zeta-dom-react"}),"\n",(0,n.jsx)(i.h1,{children:"NumericField class"}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"NumericField"})," class are not supposed to be instantiate manually. Instead it is used to\r\naugment extra functionalities when used with ",(0,n.jsx)(i.a,{href:":",children:(0,n.jsx)(i.code,{children:"useFormField"})}),"."]}),"\n",(0,n.jsx)(l,{name:"NumericField",module:"zeta-dom-react",require:"NumericField",global:"zeta.react.NumericField",expanded:!0}),"\n",(0,n.jsx)(t,{i:"NumericField"}),"\n",(0,n.jsx)(i.h2,{children:"NumericFieldProps interface"}),"\n",(0,n.jsx)(t,{i:"NumericFieldProps",extends:"FormFieldProps",ip:["min","max","step","allowEmpty"]}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"NumericFieldProps.min"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies the minimum value allowed.\r\nValue will be automatically set to this value if a smaller value is entered."}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"NumericFieldProps.max"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies the maximum value allowed.\r\nValue will be automatically set to this value if a larger value is entered."}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"NumericFieldProps.step"})}),"\n",(0,n.jsxs)(i.p,{children:["Specifies that the field value must be a multiple of such number.\r\nIf not specified or ",(0,n.jsx)(i.code,{children:"0"})," is supplied, field value can have arbitary decimal places. Negative values will be ignored."]}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"NumericFieldProps.allowEmpty"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies whether the field can be empty."}),"\n",(0,n.jsx)(i.h2,{children:"NumericFieldState interface"}),"\n",(0,n.jsx)(t,{i:"NumericFieldState",extends:"FormFieldState"}),"\n",(0,n.jsx)(i.h2,{children:"Version information"}),"\n",(0,n.jsx)(c,{module:"zeta-dom-react",children:(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"0.4.1"})," Introduced"]}),"\n"]})})]})}function s(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}i.default=function(e={}){const{wrapper:i}=e.components||{};return i?(0,n.jsx)(i,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}}}]);