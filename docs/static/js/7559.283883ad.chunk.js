"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[7559],{7559:function(e,r,n){n.r(r);var t=n(2556);function o(e){const r=Object.assign({h1:"h1",p:"p",a:"a",code:"code",pre:"pre"},e.components),{Module:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n,{name:"zeta-dom-react"}),"\n",(0,t.jsx)(r.h1,{children:"Parameterizing validations"}),"\n",(0,t.jsxs)(r.p,{children:["By default ",(0,t.jsx)(r.a,{href:":",children:(0,t.jsx)(r.code,{children:"useFormField"})})," only checks for ",(0,t.jsx)(r.code,{children:"required"})," property. Any other validations have to be done through the ",(0,t.jsx)(r.code,{children:"onValidate"})," option."]}),"\n",(0,t.jsxs)(r.p,{children:["However, it is useful to validators activated through meaningful props instead of having to passing\r\nvalidator functions to ",(0,t.jsx)(r.code,{children:"onValidate"})," every time using the component."]}),"\n",(0,t.jsx)(r.p,{children:"For example, you might want these props available for a text field:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"interface TextFieldProps extends FormFieldProps<string> {\r\n    required?: boolean;\r\n    maxLength?: number;\r\n    pattern?: string;\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"By validator factory and combining validators, it will be easy to parameterize common validations:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"interface TextInputProps extends FormFieldProps<string> {\r\n    required?: boolean;\r\n    maxLength?: number;\r\n    pattern?: string;\r\n}\r\n\r\nfunction TextInput(props: TextInputProps) {\r\n    props = {\r\n        ...props,\r\n        onValidate: combineValidators(\r\n            props.required && validator.required(),\r\n            props.maxLength && validator.maxLength(props.maxLength),\r\n            props.pattern && validator.pattern(props.pattern),\r\n            props.onValidate\r\n        )\r\n    }\r\n    const { value, error } = useFormField(props, '');\r\n    /* ... */\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"That consumer can simply do:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:'<TextInput required minLength="10" pattern="\\\\d+" />\n'})})]})}r.default=function(e={}){const{wrapper:r}=e.components||{};return r?(0,t.jsx)(r,Object.assign({},e,{children:(0,t.jsx)(o,e)})):o(e)}}}]);