"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[711],{711:function(e,n,r){r.r(n);var a=r(2556);function i(e){const n=Object.assign({h1:"h1",p:"p",code:"code",ul:"ul",li:"li",pre:"pre",blockquote:"blockquote",a:"a",h2:"h2",strong:"strong"},e.components),{Module:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r,{name:"zeta-dom-react"}),"\n",(0,a.jsx)(n.h1,{children:"Form validation"}),"\n",(0,a.jsxs)(n.p,{children:["Field validations are accomplished by ",(0,a.jsx)(n.code,{children:"onValidate"})," callback which returns:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["A falsy value, i.e. empty string, ",(0,a.jsx)(n.code,{children:"null"})," or ",(0,a.jsx)(n.code,{children:"undefined"})," if valid"]}),"\n",(0,a.jsx)(n.li,{children:"A non-empty string containing error message if invalid"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"For example sample validaton would be:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"<TextInput name=\"item\"\r\n    onValidate={value => value.length > 10 ? '' : 'Too short'} />\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Again the ",(0,a.jsx)(n.code,{children:"onValidate"})," callback support async operation:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:"<TextInput name=\"item\"\r\n    onValidate={async (value) => await asyncValidation(value) ? '' : 'Error'} />\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["For more complex scenario or reuse of validating function, see ",(0,a.jsx)(n.a,{href:"/docs/react/form/validators",children:"Validators"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{children:"Automatic validation"}),"\n",(0,a.jsx)(n.p,{children:"By default, all fields are automatically validated when value changes."}),"\n",(0,a.jsxs)(n.p,{children:["It can be disabled globally by setting ",(0,a.jsx)(n.a,{href:":",children:(0,a.jsx)(n.code,{children:"FormContext.validateOnChange"})})," options to ",(0,a.jsx)(n.code,{children:"false"}),".\r\nIt can also be enabled or disabled for each field."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'<TextInput name="item" validateOnChange={false} />\n'})}),"\n",(0,a.jsxs)(n.p,{children:["After validation completes, the ",(0,a.jsx)(n.a,{href:":",children:(0,a.jsx)(n.code,{children:"FormContext.isValid"})})," property will reflect the validity of the form."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Important:"})," Only field associated with a component will be validated. Therefore,\r\nonce component is unmounted, the field will considered be valid."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{children:"Triggering validation manually"}),"\n",(0,a.jsxs)(n.p,{children:["Validations can be triggered by calling ",(0,a.jsx)(n.a,{href:":",children:(0,a.jsx)(n.code,{children:"FormContext.validate()"})}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["It returns a promise which resolves to ",(0,a.jsx)(n.code,{children:"true"})," if all fields are valid."]}),"\n",(0,a.jsxs)(n.p,{children:["The async nature of ",(0,a.jsx)(n.a,{href:":",children:(0,a.jsx)(n.code,{children:"FormContext.validate()"})})," allows server validations."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'function Component() {\r\n    const form = useFormContext();\r\n    return (\r\n        <Form context={form}>\r\n            <TextInput name="item" required={true} />\r\n            <button onClick={async () => await form.validate() && doStuff(form.data.item)} />\r\n        </Form>\r\n    );\r\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.a,{href:":",children:(0,a.jsx)(n.code,{children:"FormContext.validate"})})," method also allows validation of specific fields:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"await form.validate('item1', 'item2');\n"})}),"\n",(0,a.jsx)(n.h2,{children:"Validation event"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"useEffect(() => {\r\n    return form.on('validateChange', e => {\r\n        if (e.name === 'input') {\r\n            // gets whether the field is valid after validation\r\n            console.log(e.isValid);\r\n        }\r\n    });\r\n}, [form]);\n"})}),"\n",(0,a.jsx)(n.h2,{children:"See also"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/react/form/parameterizing-validations",children:"Parameterizing validations"})}),"\n"]})]})}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(i,e)})):i(e)}}}]);