"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[54],{54:function(e,a,r){r.r(a);var s=r(2556);function n(e){const a=Object.assign({h1:"h1",h3:"h3",code:"code",p:"p",pre:"pre"},e.components),{Module:r,WaterpipeExample:n}=a;return r||l("Module",!0),n||l("WaterpipeExample",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r,{name:"waterpipe"}),"\n",(0,s.jsx)(a.h1,{children:"Iterable functions"}),"\n",(0,s.jsx)(a.h3,{children:(0,s.jsx)(a.code,{children:"join"})}),"\n",(0,s.jsx)(a.p,{children:"Concatenates each element in an array by the given separator."}),"\n",(0,s.jsx)(n,{data:{values:[1,2,3,4]},examples:["values join ,"]}),"\n",(0,s.jsx)(a.h3,{children:(0,s.jsx)(a.code,{children:"keys"})}),"\n",(0,s.jsx)(a.p,{children:"Gets all keys on an array or object."}),"\n",(0,s.jsx)(n,{data:{values:{foo:1,bar:2},array:[1,2,3,4]},examples:["values keys","array keys"]}),"\n",(0,s.jsx)(a.h3,{children:(0,s.jsx)(a.code,{children:"map"})}),"\n",(0,s.jsx)(a.p,{children:"Maps each element of an array or an object to another value. The original array or object is untouched."}),"\n",(0,s.jsx)(a.p,{children:"If the piped value is an object, the key of each mapped element is preserved."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-text",children:"map keyOrFn\n"})}),"\n",(0,s.jsx)(n,{data:[{key:1,value:5},{key:2,value:6},{key:3,value:7},{key:4,value:8}],examples:["map value","map [ $value + 1 ]","map [ $key | $value ]"]}),"\n",(0,s.jsxs)(a.h3,{children:[(0,s.jsx)(a.code,{children:"sort"}),", ",(0,s.jsx)(a.code,{children:"sortby"}),", ",(0,s.jsx)(a.code,{children:"rsort"}),", ",(0,s.jsx)(a.code,{children:"rsortby"})]}),"\n",(0,s.jsx)(a.p,{children:"Sorts the array. The original array is untouched."}),"\n",(0,s.jsx)(n,{data:{simple:[4,2,3,1],complex:[{key:3},{key:1},{key:2}]},examples:["simple sort","complex sortby key"]}),"\n",(0,s.jsx)(a.p,{children:"Sort by multiple values:"}),"\n",(0,s.jsx)(n,{data:{complex:[{key:3,value:2},{key:3,value:1},{key:1,value:4},{key:2,value:3}]},examples:["complex sortby [ key | value ]"]}),"\n",(0,s.jsxs)(a.h3,{children:[(0,s.jsx)(a.code,{children:"isort"}),", ",(0,s.jsx)(a.code,{children:"isortby"}),", ",(0,s.jsx)(a.code,{children:"irsort"}),", ",(0,s.jsx)(a.code,{children:"irsortby"})]}),"\n",(0,s.jsx)(n,{data:{simple:["a","b","A","B"],complex:[{key:"a"},{key:"A"},{key:"B"}]},examples:["simple isort","complex isortby key"]}),"\n",(0,s.jsx)(a.p,{children:"Compare result with ordinary sort:"}),"\n",(0,s.jsx)(n,{data:{simple:["a","b","A","B"],complex:[{key:"a"},{key:"A"},{key:"B"}]},examples:["simple sort","complex sortby key"]}),"\n",(0,s.jsx)(a.h3,{children:(0,s.jsx)(a.code,{children:"reverse"})}),"\n",(0,s.jsx)(a.p,{children:"Reverses the array. The original array is untouched."}),"\n",(0,s.jsx)(n,{data:{values:[1,2,3,4]},examples:["values reverse"]}),"\n",(0,s.jsxs)(a.h3,{children:[(0,s.jsx)(a.code,{children:"where"}),", ",(0,s.jsx)(a.code,{children:"first"}),", ",(0,s.jsx)(a.code,{children:"any"}),", ",(0,s.jsx)(a.code,{children:"all"})]}),"\n",(0,s.jsx)(a.p,{children:"Performs operation over an array or object. The original array or object is untouched."}),"\n",(0,s.jsxs)(a.p,{children:["For the ",(0,s.jsx)(a.code,{children:"where"})," pipe function, if the piped value is an object, the key of each mapped element is preserved."]}),"\n",(0,s.jsx)(n,{data:{values:[1,2,3,4]},examples:["values where [ odd ]","values first [ even ]","values any [ even ]","values all [ even ]"]}),"\n",(0,s.jsx)(a.h3,{children:(0,s.jsx)(a.code,{children:"sum"})}),"\n",(0,s.jsx)(a.p,{children:"Reduces the array or object into a scalar value, optionally with a seed value."}),"\n",(0,s.jsx)(n,{data:{values:[1,2,3,4]},examples:["values sum","values sum 5","values sum foo"]}),"\n",(0,s.jsx)(a.p,{children:"Summing through objects:"}),"\n",(0,s.jsx)(n,{data:{values:[{value:1},{value:2},{value:3}]},examples:["values sum [ value ]","values sum foo [ value ]"]}),"\n",(0,s.jsx)(a.h3,{children:(0,s.jsx)(a.code,{children:"length"})}),"\n",(0,s.jsx)(a.p,{children:"Gets the length of the array or string."}),"\n",(0,s.jsx)(n,{data:{array:[1,2,3],string:"foobar"},examples:["array length","string length"]})]})}function l(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}a.default=function(e={}){const{wrapper:a}=e.components||{};return a?(0,s.jsx)(a,Object.assign({},e,{children:(0,s.jsx)(n,e)})):n(e)}}}]);