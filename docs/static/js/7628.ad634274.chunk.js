"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[7628],{7628:function(e,t,r){r.r(t);var n=r(2556);function s(e){const t=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",pre:"pre"},e.components),{Module:r}=t;return r||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r,{name:"zeta-dom-react"}),"\n",(0,n.jsx)(t.h1,{children:"Overview"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"DataView"})," provides a simple way to filter, sort and pagingate data. It provides interfaces for components to read and update the data view configuration."]}),"\n",(0,n.jsx)(t.h2,{children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"function Component() {\r\n    const items = [/* ... our data */];\r\n    const dataView = useDataView(\r\n        /* filters */   { type: '' },\r\n        /* sort by */   'date', 'desc',\r\n        /* page size */ 100);\r\n\r\n    const [pagedItmes] = dataView.getView(items, (items, filters) => {\r\n        /* apply filters */\r\n        if (filters.type) {\r\n            items = items.filter(v => v.type === filters.type);\r\n        }\r\n        return dataView.sort(items);\r\n    });\r\n    /* ... */\r\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"When there is no applicable filters nor custom sorting, the callback can be omitted:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tsx",children:"function Component() {\r\n    const items = [/* ... our data */];\r\n    const dataView = useDataView(\r\n        /* filters */   {},\r\n        /* sort by */   'date', 'desc',\r\n        /* page size */ 100);\r\n\r\n    const [pagedItmes] = dataView.getView(items);\r\n    /* ... */\r\n}\n"})}),"\n",(0,n.jsx)(t.h2,{children:"Persistance through history"}),"\n",(0,n.jsxs)(t.p,{children:["If ",(0,n.jsx)(t.code,{children:"ViewStateProvider"})," is implemented, and is provided through the ",(0,n.jsx)(t.code,{children:"<ViewStateProvider>"})," component, the state of data view is automatically persisted through history."]}),"\n",(0,n.jsxs)(t.p,{children:["For example, using ",(0,n.jsx)(t.code,{children:"brew-js-react"}),"."]})]})}t.default=function(e={}){const{wrapper:t}=e.components||{};return t?(0,n.jsx)(t,Object.assign({},e,{children:(0,n.jsx)(s,e)})):s(e)}}}]);