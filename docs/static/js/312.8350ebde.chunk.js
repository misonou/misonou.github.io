"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[312],{312:function(e,n,r){r.r(n);var s=r(2556);function t(e){const n=Object.assign({h1:"h1",p:"p",blockquote:"blockquote",h2:"h2",del:"del",pre:"pre",code:"code",a:"a"},e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{children:"TypeScript issues"}),"\n",(0,s.jsx)(n.p,{children:"Here listed major known issues over different versions, listing affected versions and possible workaround."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"This may or may not be linted by the IDE depends on the TypeScript version used."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{children:"Updated type argument of useRefInitCallback"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.del,{children:"zeta-dom-react >=0.5.13"})}),"\n",(0,s.jsx)(n.p,{children:"The type argument is updated to provide correct type inference."}),"\n",(0,s.jsx)(n.p,{children:"If you have specified the second type argument specified like below"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// TS2344: Type '(element: Element, arg: number) => void' does not satisfy the constraint 'any[]'.\r\nuseRefInitCallback<Element, (element: Element, arg: number) => void>(elm => { /* ... */}, 1);\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can either change to the following ways:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"useRefInitCallback((elm: Element) => { /* ... */}, 1);\r\nuseRefInitCallback<Element, [number]>(elm => { /* ... */}, 1);\n"})}),"\n",(0,s.jsx)(n.h2,{children:"Unable to infer signature of closeDialog correctly"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.del,{children:"brew-js-react >=0.6.4"})," ",(0,s.jsx)(n.del,{children:"typescript <5.3.2"})]}),"\n",(0,s.jsxs)(n.p,{children:["After updating ",(0,s.jsx)(n.code,{children:"brew-js-react"})," to ",(0,s.jsx)(n.code,{children:"0.6.4"}),", the signature of ",(0,s.jsx)(n.a,{href:":",children:(0,s.jsx)(n.code,{children:"DialogContext.closeDialog"})})," may not be properly inferred if the ",(0,s.jsx)(n.code,{children:"onCommit"})," callback is declared to have\r\nits first parameter optional:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"createDialog({\r\n    onCommit(value?: boolean) {\r\n        /* ... */\r\n    },\r\n    onRender({ closeDialog }) {\r\n        // TS2554: Expected 1 arguments, but got 0.\r\n        const onClick = () => closeDialog();\r\n        /* ... */\r\n    }\r\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To solve the linting error, change the first parameter of ",(0,s.jsx)(n.code,{children:"onCommit"})," to explicitly typed with ",(0,s.jsx)(n.code,{children:"undefined"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"createDialog({\r\n    onCommit(value?: boolean | undefined) {\r\n        /* ... */\r\n    },\r\n    /* ... */\r\n});\n"})})]})}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(t,e)})):t(e)}}}]);