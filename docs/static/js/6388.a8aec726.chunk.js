"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[6388],{6388:function(e,r,n){n.r(r);var t=n(2556);function o(e){const r=Object.assign({h1:"h1",h2:"h2",h3:"h3",code:"code",p:"p",del:"del",pre:"pre",ul:"ul",li:"li",a:"a"},e.components),{Module:n,MemberList:o,Badge:i}=r;return i||s("Badge",!1),i.ReadOnly||s("Badge.ReadOnly",!0),o||s("MemberList",!0),n||s("Module",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n,{name:"zeta-dom-react"}),"\n",(0,t.jsx)(r.h1,{children:"FormContext class"}),"\n",(0,t.jsx)(o,{i:"FormContext",sp:["ERROR_FIELD","EMPTY_FIELD","formatError"],sm:["get()"],ip:["isValid","data","ref","autoPersist","preventLeave","validateOnChange","enterKeyHint","formatError"],im:["element()","focus()","on()","persist()","restore()","clear()","reset()","getValue()","setValue()","getErrors()","getError()","setError()","validate()","toJSON()"],ev:["dataChange","reset","validate","validationChange"]}),"\n",(0,t.jsx)(r.h2,{children:"Instance properties"}),"\n",(0,t.jsxs)(r.h3,{children:[(0,t.jsx)(r.code,{children:"FormContext.data"})," ",(0,t.jsx)(i.ReadOnly,{})]}),"\n",(0,t.jsx)(r.p,{children:"Gets a dictionary containing field values."}),"\n",(0,t.jsx)(r.h3,{children:(0,t.jsx)(r.code,{children:"FormContext.isValid"})}),"\n",(0,t.jsx)(r.p,{children:"Returns if all fields have passed validations."}),"\n",(0,t.jsx)(r.h2,{children:"Instance methods"}),"\n",(0,t.jsx)(r.h3,{children:(0,t.jsx)(r.code,{children:"FormContext.element()"})}),"\n",(0,t.jsx)(r.p,{children:"Retrieves element of a named field."}),"\n",(0,t.jsx)(r.h3,{children:(0,t.jsx)(r.code,{children:"FormContext.focus()"})}),"\n",(0,t.jsx)(r.p,{children:"Focus input control of a named field."}),"\n",(0,t.jsx)(r.h3,{children:(0,t.jsx)(r.code,{children:"FormContext.on()"})}),"\n",(0,t.jsx)(r.p,{children:"Registers event handlers."}),"\n",(0,t.jsx)(r.h3,{children:(0,t.jsx)(r.code,{children:"FormContext.persist()"})}),"\n",(0,t.jsx)(r.p,{children:"Persist form data to view state."}),"\n",(0,t.jsx)(r.h3,{children:(0,t.jsx)(r.code,{children:"FormContext.reset()"})}),"\n",(0,t.jsx)(r.p,{children:"Resets all fields to initial values and clear all validation errors."}),"\n",(0,t.jsx)(r.h3,{children:(0,t.jsx)(r.code,{children:"FormContext.restore()"})}),"\n",(0,t.jsx)(r.p,{children:"Restore form data from view state."}),"\n",(0,t.jsx)(r.h3,{children:(0,t.jsx)(r.code,{children:"FormContext.getError()"})}),"\n",(0,t.jsx)(r.p,{children:"Gets error state on a named field."}),"\n",(0,t.jsxs)(r.h3,{children:[(0,t.jsx)(r.code,{children:"FormContext.getErrors()"})," ",(0,t.jsx)(r.del,{children:"v0.4.4"})]}),"\n",(0,t.jsx)(r.p,{children:"Gets all validation errors."}),"\n",(0,t.jsxs)(r.p,{children:["It returns an object which each key is the name of an invalid field, and value is the corresponding error; or ",(0,t.jsx)(r.code,{children:"null"})," if there is no error."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"// log all errors in console if validation failed\r\nif (!await field.validate()) {\r\n    each(form.getErrors(), (field, error) => {\r\n        console.log(field, error);\r\n    });\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{children:(0,t.jsx)(r.code,{children:"FormContext.setError()"})}),"\n",(0,t.jsx)(r.p,{children:"Forces error state on a named field."}),"\n",(0,t.jsx)(r.h3,{children:(0,t.jsx)(r.code,{children:"FormContext.validate()"})}),"\n",(0,t.jsx)(r.p,{children:"Validates all or specific fields."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"const form = useFormContext();\r\n\r\nasync function checkAll() {\r\n    let isValid = await form.validate();\r\n}\r\nasync function checkNameAndEmail() {\r\n    let isValid = await form.validate('name', 'email');\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{children:"Static methods"}),"\n",(0,t.jsx)(r.h3,{children:(0,t.jsx)(r.code,{children:"FormContext.get()"})}),"\n",(0,t.jsxs)(r.p,{children:["Retrieve the associated ",(0,t.jsx)(r.code,{children:"FormContext"})," object if a ",(0,t.jsx)(r.code,{children:"<form>"})," element is rendered using ",(0,t.jsx)(r.code,{children:"<Form>"})," component or manually assigned ",(0,t.jsx)(r.code,{children:"FormContext.ref"})," to a ",(0,t.jsx)(r.code,{children:"<form>"})," element."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"import { Form, useFormContext } from \"zeta-dom-react\";\r\n\r\nfunction MyForm() {\r\n    const form = useFormContext();\r\n    return (\r\n        <Form context={form}>\r\n            <Child />\r\n        </Form>\r\n    );\r\n}\r\n\r\nfunction Child() {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        const formElement = ref.current.closest('form');\r\n        if (formElement) {\r\n            // this can retreive the `FormContext` object\r\n            // created by the parent `<MyForm>` component\r\n            const form = FormContext.get(formElement);\r\n        }\r\n    }, []);\r\n    return (\r\n        <div ref={ref}>\r\n            {/* ... */}\r\n        </div>\r\n    );\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{children:"Events"}),"\n",(0,t.jsxs)(r.h3,{children:[(0,t.jsx)(r.code,{children:"dataChange"})," event"]}),"\n",(0,t.jsxs)(r.h3,{children:[(0,t.jsx)(r.code,{children:"reset"})," event"]}),"\n",(0,t.jsxs)(r.h3,{children:[(0,t.jsx)(r.code,{children:"validate"})," event"]}),"\n",(0,t.jsxs)(r.h3,{children:[(0,t.jsx)(r.code,{children:"validationChange"})," event"]}),"\n",(0,t.jsx)(r.p,{children:"Deprecated"}),"\n",(0,t.jsx)(r.h2,{children:"See also"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsxs)(r.a,{href:"/docs/react/form/useFormContext",children:[(0,t.jsx)(r.code,{children:"useFormContext"})," hook"]})}),"\n"]})]})}function s(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}r.default=function(e={}){const{wrapper:r}=e.components||{};return r?(0,t.jsx)(r,Object.assign({},e,{children:(0,t.jsx)(o,e)})):o(e)}}}]);