"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[5864],{5864:function(e,r,o){o.r(r);var n=o(2556);function l(e){const r=Object.assign({h1:"h1",p:"p",code:"code",pre:"pre",blockquote:"blockquote",strong:"strong"},e.components),{Module:o,WaterpipeExample:l}=r;return o||a("Module",!0),l||a("WaterpipeExample",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o,{name:"waterpipe"}),"\n",(0,n.jsx)(r.h1,{children:"Global variables"}),"\n",(0,n.jsxs)(r.p,{children:["You can define global variables when calling ",(0,n.jsx)(r.code,{children:"waterpipe()"})," or on the super global ",(0,n.jsx)(r.code,{children:"waterpipe.globals"}),":"]}),"\n",(0,n.jsx)(r.p,{children:"For an object path if the first segment is not a property name on the current object or any visible objects in the stack, it will be evaluated against the visible global objects."}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"// define global variables when calling `waterpipe()`\r\nwaterpipe(template, data, {\r\n    globals: {\r\n        myGlobal: 'foobar'\r\n    }\r\n});\r\n\r\n// define variables on the super global `waterpipe.globals`\r\nwaterpipe.globals.myGlobal = 'foobar';\n"})}),"\n",(0,n.jsxs)(r.p,{children:["In either case the following template will output the string ",(0,n.jsx)(r.code,{children:"foobar"})," if\r\nthere is no ",(0,n.jsx)(r.code,{children:"myGlobal"})," property in the input data object."]}),"\n",(0,n.jsx)(l,{globals:{myGlobal:"foobar"},examples:["myGlobal"]}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"Note:"})," Variables defined on ",(0,n.jsx)(r.code,{children:"waterpipe.globals"})," will be shared across all template interpolation."]}),"\n"]})]})}function a(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}r.default=function(e={}){const{wrapper:r}=e.components||{};return r?(0,n.jsx)(r,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}}}]);