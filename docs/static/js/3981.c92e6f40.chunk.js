"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[3981],{3981:function(e,r,n){n.r(r);var s=n(2556);function l(e){const r=Object.assign({h1:"h1",del:"del",p:"p",code:"code",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h3:"h3",pre:"pre"},e.components),{Module:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n,{name:"zeta-dom-react"}),"\n",(0,s.jsxs)(r.h1,{children:["Field types ",(0,s.jsx)(r.del,{children:"v0.3.2"})]}),"\n",(0,s.jsx)(r.p,{children:"Field types abstracts logic away from the control component."}),"\n",(0,s.jsx)(r.p,{children:"It is useful for writing field with the same logic with different visual representation, for example a checkbox v.s. a toggle, or a dropdown v.s. tabs."}),"\n",(0,s.jsxs)(r.p,{children:["When passed to ",(0,s.jsx)(r.code,{children:"useFormField"}),", it returns extra members that facilitate the working of such kind of fields."]}),"\n",(0,s.jsx)(r.h2,{children:"Built-in field types"}),"\n",(0,s.jsx)(r.p,{children:"There are six built-in field types:"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Class"}),(0,s.jsx)(r.th,{children:"Usage"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"TextField"})}),(0,s.jsx)(r.td,{children:"Text box"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"ToggleField"})}),(0,s.jsx)(r.td,{children:"Checkbox, toggle"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"ChoiceField"})}),(0,s.jsx)(r.td,{children:"Dropdown, tabs"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"MultiChoiceField"})}),(0,s.jsx)(r.td,{children:"Checkbox list, multi-select dropdown"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"NumericField"})}),(0,s.jsx)(r.td,{children:"Number input, slider"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"DateField"})}),(0,s.jsx)(r.td,{children:"Date picker"})]})]})]}),"\n",(0,s.jsx)(r.h3,{children:(0,s.jsx)(r.code,{children:"TextField"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"function Textbox(props: TextFieldProps) {\r\n    const { value, error, setValue, elementRef, inputProps } = useFormField(TextField, props, '');\r\n    return (\r\n        <label ref={elementRef}>\r\n            <div>{props.label}</div>\r\n            <input {...inputProps} name={props.name} value={value} onChange={e => setValue(e.target.value)} />\r\n            {error && props.showErrorMessage !== false &&\r\n                <div className=\"error\">{error}</div>}\r\n        </label>\r\n    );\r\n}\n"})}),"\n",(0,s.jsx)(r.h3,{children:(0,s.jsx)(r.code,{children:"ChoiceField"})}),"\n",(0,s.jsx)(r.h3,{children:(0,s.jsx)(r.code,{children:"MultiChoiceField"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:'interface CheckboxItem extends ChoiceItem<string> {\r\n    disabled?: boolean;\r\n}\r\n\r\nfunction CheckboxList(props: MultiChoiceFieldProps<CheckboxItem>) {\r\n    const { items, value, error, toggleValue, elementRef } = useFormField(MultiChoiceField, props, []);\r\n    return (\r\n        <div ref={elementRef}>\r\n            <span>{props.label}</span>\r\n            {items.map((v, i) => (\r\n                <label key={i}>\r\n                    <input type="checkbox" checked={value.includes(v.value)} onChange={() => toggleValue(v.value)} />\r\n                    <span>{v.label}</span>\r\n                </label>\r\n            ))}\r\n            {error && props.showErrorMessage !== false &&\r\n                <div className="error">{error}</div>}\r\n        </div>\r\n    );\r\n}\n'})}),"\n",(0,s.jsx)(r.h3,{children:(0,s.jsx)(r.code,{children:"ToggleField"})}),"\n",(0,s.jsxs)(r.h3,{children:[(0,s.jsx)(r.code,{children:"NumericField"})," ",(0,s.jsx)(r.del,{children:"v0.4.1"})]}),"\n",(0,s.jsxs)(r.h3,{children:[(0,s.jsx)(r.code,{children:"DateField"})," ",(0,s.jsx)(r.del,{children:"v0.4.2"})]}),"\n",(0,s.jsx)(r.h2,{children:"Writing custom field type"})]})}r.default=function(e={}){const{wrapper:r}=e.components||{};return r?(0,s.jsx)(r,Object.assign({},e,{children:(0,s.jsx)(l,e)})):l(e)}}}]);