"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[7510],{7510:function(e,n,r){r.r(n),r.d(n,{default:function(){return i}});var t=r(2556),a=r(4050),l=r(6862),o='import { forwardRef, useState } from "react";\r\nimport { IconType } from "react-icons/lib";\r\nimport dom from "zeta-dom/dom";\r\nimport { combineFn } from "zeta-dom/util";\r\nimport { classNames, combineValidators, toRefCallback, TextField, TextFieldProps, useFormField, combineRef, domEventRef } from "zeta-dom-react";\r\nimport { Mixin, useFocusStateMixin } from "brew-js-react";\r\nimport { useTextInputAutofillFix } from "@misonou/react-app-utils";\r\nimport { FaEye, FaEyeSlash } from "react-icons/fa";\r\nimport { Icon, validators } from ".";\r\n\r\nexport interface TextInputProps extends TextFieldProps {\r\n    label?: string;\r\n    icon?: IconType;\r\n    className?: string;\r\n    adornment?: string;\r\n    placeholder?: string;\r\n    required?: boolean;\r\n    readOnly?: boolean;\r\n    pattern?: string;\r\n    multiline?: boolean;\r\n    allowChar?: string;\r\n    toggle?: IconType;\r\n    onToggle?: () => void;\r\n}\r\n\r\nexport const TextInput = forwardRef<HTMLLabelElement, TextInputProps>((props, ref) => {\r\n    props = {\r\n        ...props,\r\n        onValidate: combineValidators(\r\n            props.required && validators.required(),\r\n            props.pattern && validators.pattern(props.pattern),\r\n            props.onValidate\r\n        )\r\n    };\r\n    const focusState = useFocusStateMixin();\r\n    const isPassword = props.type === \'password\';\r\n    const [unmask, setUnmask] = useState(false);\r\n    const { value, error, setValue, elementRef, inputProps, path } = useFormField(TextField, props, \'\');\r\n    const { inputRef, requireFakeInput } = useTextInputAutofillFix();\r\n\r\n    ref = combineFn(elementRef, toRefCallback(ref));\r\n\r\n    const inputType = isPassword && unmask ? \'text\' : props.type || \'text\';\r\n    const alwaysShowLabel = !!props.adornment || !!props.placeholder || !!props.icon;\r\n    return (\r\n        <label {...Mixin.use(\r\n            ref,\r\n            focusState,\r\n            classNames(\'zui-field zui-text-field\', props.className, {\r\n                disabled: props.disabled,\r\n                empty: !value,\r\n                \'is-multiline\': props.multiline,\r\n                \'has-icon\': !!props.icon,\r\n                \'has-error\': !!error,\r\n                \'has-label\': !!props.label\r\n            }))}>\r\n            {alwaysShowLabel && props.label &&\r\n                <div className="zui-text-field-label-above">{props.label}</div>}\r\n            <div className="zui-text-field-outline">\r\n                {props.icon &&\r\n                    <Icon icon={props.icon} className="zui-text-field-icon" />}\r\n                {props.adornment &&\r\n                    <span className="zui-text-field-adornment">{props.adornment}</span>}\r\n                <div className="zui-text-field-input">\r\n                    {!alwaysShowLabel &&\r\n                        <div className="zui-text-field-label">{props.label}</div>}\r\n                    {props.multiline ?\r\n                        <textarea ref={inputRef as React.RefObject<HTMLTextAreaElement>}\r\n                            name={path} value={value} {...inputProps}\r\n                            onChange={onChange} /> :\r\n                        <input ref={combineRef(inputRef, domEventRef(\'textInput\', onTextInput))}\r\n                            name={path} value={value} {...inputProps} type={inputType}\r\n                            onChange={onChange} />}\r\n                    {requireFakeInput &&\r\n                        <input className="zui-text-field-placeholder" placeholder={props.placeholder} disabled />}\r\n                </div>\r\n                {isPassword &&\r\n                    (unmask ?\r\n                        <Icon icon={FaEye} className="zui-text-field-toggle" onClick={() => setUnmask(false)} /> :\r\n                        <Icon icon={FaEyeSlash} className="zui-text-field-toggle" onClick={() => setUnmask(true)} />)}\r\n                {props.toggle &&\r\n                    <Icon icon={props.toggle} className="zui-text-field-toggle" onClick={props.onToggle} />}\r\n            </div>\r\n            {error && props.showErrorMessage !== false &&\r\n                <div className="zui-field-error">{error}</div>}\r\n        </label>\r\n    );\r\n\r\n    function onChange(e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n        let text = e.target.value;\r\n        if (props.allowChar) {\r\n            text = text.replace(new RegExp(\'[^\' + props.allowChar + \']\', \'g\'), \'\');\r\n        }\r\n        if (props.maxLength) {\r\n            text = text.slice(0, props.maxLength);\r\n        }\r\n        setValue(text);\r\n    }\r\n\r\n    function onTextInput(e: Zeta.ZetaTextInputEvent, input: HTMLInputElement) {\r\n        if (input.selectionStart !== null && (props.allowChar || props.maxLength)) {\r\n            let text = e.data;\r\n            if (props.allowChar) {\r\n                text = text.replace(new RegExp(\'[^\' + props.allowChar + \']\', \'g\'), \'\');\r\n            }\r\n            if (text) {\r\n                dom.insertText(input, text);\r\n            }\r\n            e.handled();\r\n        }\r\n    }\r\n});\r\n';function s(e){const n=Object.assign({h1:"h1",pre:"pre",code:"code",h2:"h2",ul:"ul",li:"li",a:"a"},e.components),{Module:r,CodeBlock:s}=n;return s||p("CodeBlock",!0),r||p("Module",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r,{name:"zeta-dom-react"}),"\n",(0,t.jsx)(n.h1,{children:"TextInput"}),"\n",(0,t.jsx)(a.oi,{label:"Name"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<TextInput label="Name" />\n'})}),"\n",(0,t.jsx)(n.h2,{children:"Example: Placeholder"}),"\n",(0,t.jsx)(a.oi,{label:"Price",placeholder:"Enter price"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<TextInput label="Price" placeholder="Enter price" />\n'})}),"\n",(0,t.jsx)(n.h2,{children:"Example: Adornment"}),"\n",(0,t.jsx)(a.oi,{label:"Name",adornment:"$"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<TextInput label="Name" adornment="$" />\n'})}),"\n",(0,t.jsx)(n.h2,{children:"Example: Icon"}),"\n",(0,t.jsx)(a.oi,{label:"Name",icon:l.XEH}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<TextInput label="Name" icon={FaMobileAlt} />\n'})}),"\n",(0,t.jsx)(n.h2,{children:"Example: Limit character and length"}),"\n",(0,t.jsx)(a.oi,{label:"Digit only",allowChar:"0-9",maxLength:8}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<TextInput label="Digit only" allowChar="0-9" maxLength={8} />\n'})}),"\n",(0,t.jsx)(n.h2,{children:"Example: Native input type"}),"\n",(0,t.jsx)(a.oi,{label:"Phone number",type:"tel"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<TextInput label="Phone number" type="tel" />\n'})}),"\n",(0,t.jsx)(n.h2,{children:"Example: Password with toggle"}),"\n",(0,t.jsx)(a.oi,{label:"Password",type:"password"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<TextInput label="Password" type="password" />\n'})}),"\n",(0,t.jsx)(n.h2,{children:"Example: Readonly input"}),"\n",(0,t.jsx)(a.oi,{label:"Readonly with action",readOnly:!0,toggle:l.Dup}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<TextInput label="Readonly with action" readOnly toggle={FaRegCopy} />\n'})}),"\n",(0,t.jsx)(n.h2,{children:"Example: Forced error state"}),"\n",(0,t.jsx)(a.oi,{label:"Field with error",error:"Error"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<TextInput label="Field with error" error="Error" />\n'})}),"\n",(0,t.jsx)(n.h2,{children:"Source code"}),"\n",(0,t.jsx)(s,{children:o,className:"language-tsx"}),"\n",(0,t.jsx)(n.h2,{children:"See also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:":",children:(0,t.jsx)(n.code,{children:"TextField"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:":",children:(0,t.jsx)(n.code,{children:"TextFieldProps"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:":",children:(0,t.jsx)(n.code,{children:"TextFieldState"})})}),"\n"]})]})}var i=function(e={}){const{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(s,e)})):s(e)};function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);