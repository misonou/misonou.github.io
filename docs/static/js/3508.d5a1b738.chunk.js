"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[3508],{3508:function(e,n,r){r.r(n),r.d(n,{default:function(){return l}});var t=r(2556),s=r(8944),o=r(4519),a='import { useEffect, useRef, useState } from "react";\r\nimport { FormFieldProps, combineRef, combineValidators, useDispose, useFormField, useRefInitCallback } from "zeta-dom-react";\r\nimport { runCSSTransition } from "zeta-dom/cssUtil";\r\nimport { makeArray, noop, setTimeout } from "zeta-dom/util";\r\nimport dom, { focused } from "zeta-dom/dom";\r\nimport { validators } from ".";\r\n\r\nexport interface OTPFieldProps extends FormFieldProps<string> {\r\n    length: number;\r\n    masked?: boolean;\r\n    onValidateSuccess?: () => void;\r\n}\r\n\r\nexport function OTPField(props: OTPFieldProps) {\r\n    props = {\r\n        ...props,\r\n        onValidate: combineValidators(\r\n            () => void setError(\'\'),\r\n            validators.required(),\r\n            props.onValidate,\r\n            () => void props.onValidateSuccess?.()\r\n        )\r\n    };\r\n    const { value, error, setValue, setError, elementRef } = useFormField(props, \'\');\r\n    const [displayValue, setDisplayValue] = useState(value);\r\n    const [maskLength, setMaskLength] = useState(0);\r\n    const onDispose = useDispose();\r\n    const divRef = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (error && value) {\r\n            setValue(\'\');\r\n            runCSSTransition(divRef.current!, \'error-anim\', true).then(() => {\r\n                setDisplayValue(\'\');\r\n            });\r\n        }\r\n    }, [value, error]);\r\n\r\n    useEffect(() => {\r\n        if (displayValue.length === props.length) {\r\n            setValue(displayValue);\r\n        }\r\n        if (focused(divRef.current!)) {\r\n            setFocus();\r\n        }\r\n    }, [displayValue, props.length]);\r\n\r\n    return (\r\n        <div ref={elementRef} className="zui-field zui-otp-field">\r\n            <div className="zui-otp-field-input" ref={combineRef(divRef, useRefInitCallback(initEvent))}>\r\n                {\'1\'.repeat(props.length).split(\'\').map((_, i) => (\r\n                    <input key={i} type={props.masked && i < maskLength ? \'password\' : \'text\'} value={displayValue[i] || \'\'} className="zui-text-field"\r\n                        autoComplete="one-time-code" autoCorrect="off" autoCapitalize="off" inputMode="numeric" onChange={noop} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    function setFocus() {\r\n        const inputs = makeArray(divRef.current!.querySelectorAll(\'input\'));\r\n        const cur = inputs.find(v => !v.value) || inputs.slice(-1)[0];\r\n        dom.focus(cur);\r\n        cur.setSelectionRange(1, 1);\r\n    }\r\n\r\n    function initEvent(element: HTMLElement) {\r\n        dom.on(element, {\r\n            focusin: setFocus,\r\n            focuschange: setFocus,\r\n            textInput(e) {\r\n                setDisplayValue(value => {\r\n                    const newValue = (value + e.data.replace(/\\D/g, \'\')).slice(0, props.length);\r\n                    // mask previous entered number immediately\r\n                    // and show the latest entered number for 1 second\r\n                    setMaskLength(value.length);\r\n                    onDispose.push(setTimeout(() => {\r\n                        setMaskLength(v => Math.max(v, newValue.length));\r\n                    }, 1000));\r\n                    return newValue;\r\n                });\r\n                e.handled();\r\n            },\r\n            backspace(e) {\r\n                setDisplayValue(value => {\r\n                    return value.slice(0, -1);\r\n                });\r\n                e.handled();\r\n            }\r\n        });\r\n    }\r\n}\r\n';function i(e){const n=Object.assign({h1:"h1",pre:"pre",code:"code",h2:"h2"},e.components),{Module:r,Inline:i,CodeBlock:l}=n;return l||u("CodeBlock",!0),i||u("Inline",!0),r||u("Module",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r,{name:"zeta-dom-react"}),"\n",(0,t.jsx)(n.h1,{children:"One-time passcode"}),"\n",(0,t.jsx)(s.Oc,{length:6}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"<OTPField length={6} />\n"})}),"\n",(0,t.jsx)(n.h2,{children:"Masked input"}),"\n",(0,t.jsx)(s.Oc,{length:6,masked:!0}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"<OTPField length={6} masked />\n"})}),"\n",(0,t.jsx)(n.h2,{children:"Clear on error"}),"\n",(0,t.jsx)(i,{children:()=>{const[e,n]=o.useState("");return(0,t.jsx)(s.Oc,{length:6,error:e,onChange:()=>n("Incorrect")})}}),"\n",(0,t.jsx)(n.h2,{children:"Source code"}),"\n",(0,t.jsx)(l,{children:a,className:"typescript"})]})}var l=function(e={}){const{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(i,e)})):i(e)};function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);