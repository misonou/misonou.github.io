"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[9192],{9192:function(e,n,t){t.r(n);var r=t(2556);function o(e){const n=Object.assign({h1:"h1",p:"p",pre:"pre",code:"code",h2:"h2",blockquote:"blockquote",strong:"strong",a:"a"},e.components),{Module:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t,{name:"zeta-dom-react"}),"\n",(0,r.jsx)(n.h1,{children:"useRefInitCallback"}),"\n",(0,r.jsx)(n.p,{children:"Creates a React ref callback, that will invoke the supplied callback only once for each a new DOM element created."}),"\n",(0,r.jsx)(n.p,{children:"It is generally used for one-time setup for DOM element, for example binding Zeta DOM events:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"function Component(props) {\r\n    const initRef = useRefInitCallback((element: HTMLElement) => {\r\n        // this callback will execute exactly once for the <DIV> element\r\n        zeta.dom.on(element, 'focusreturn', (e) => {\r\n            /* ... */\r\n        });\r\n    });\r\n    return (<div ref={initRef}></div>);\r\n}\n"})}),"\n",(0,r.jsx)(n.h2,{children:"Callback lifetime"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important"}),": Since the callback is only called once for a DOM element in the component's lifetime, any variables referenced in the callback must be unchanged throughout the lifetime, such as created from ",(0,r.jsx)(n.a,{href:"https://reactjs.org/docs/hooks-reference.html#useref",children:(0,r.jsx)(n.code,{children:"React.useRef"})}),". For functions, it can be wrapped by ",(0,r.jsx)(n.a,{href:"/docs/react/useMemoizedFunction",children:(0,r.jsx)(n.code,{children:"useMemoizedFunction"})}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"function Component(props) {\r\n    const [counter, setCounter] = useState(0);\r\n    const [singletionObject] = useState({ count: 0 });\r\n    const counterRef = useRef(0);\r\n    const memoizedCallback = useMemoizedFunction(props.callback);\r\n\r\n    const inlineCallback = () => { /* ... */ };\r\n    const memoizedInlineCallback = useMemoizedFunction(inlineCallback);\r\n\r\n    const initRef = useRefInitCallback((element: HTMLElement) => {\r\n        // OK\r\n        singletionObject.count++;\r\n        counterRef.current++;\r\n\r\n        // OK, see `useMemoizedFunction`\r\n        memoizedCallback();\r\n        memoizedInlineCallback();\r\n\r\n        // not OK\r\n        counter;          // -> state might change over the lifetime\r\n        props.callback(); // -> anything on props might be changed over the lifetime\r\n                          //    also callback may be bound to previous states\r\n                          //    which results in memory leaks\r\n        inlineCallback(); // -> definitely memory leaks\r\n    });\r\n    return (<div ref={initRef}></div>);\r\n}\n"})})]})}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(o,e)})):o(e)}}}]);
//# sourceMappingURL=9192.ebfacecb.chunk.js.map