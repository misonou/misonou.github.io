"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[5881],{5881:function(e,n,r){r.r(n);var o=r(2556);function i(e){const n=Object.assign({h1:"h1",h2:"h2",p:"p",code:"code",pre:"pre",ul:"ul",li:"li"},e.components),{Module:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r,{name:"brew-js-react"}),"\n",(0,o.jsx)(n.h1,{children:"Customizing dialog"}),"\n",(0,o.jsx)(n.h2,{children:"Dialog body wrapper"}),"\n",(0,o.jsxs)(n.p,{children:["Dialog UI structure can be encapsulated by a component and re-use by ",(0,o.jsx)(n.code,{children:"wrapper"})," option:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"function DialogBody(props: React.PropsWithChildren<DialogRenderComponentProps<any, any>>) {\r\n    return (\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\ncreateDialog({\r\n    wrapper: DialogBody\r\n});\n"})}),"\n",(0,o.jsx)(n.h2,{children:"Opening and closing animation"}),"\n",(0,o.jsxs)(n.p,{children:["In addition to the ",(0,o.jsx)(n.code,{children:"className"})," option, these CSS classes are added to dialog's root element in sequence:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:".visible"}),": dialog should be rendered from now on (i.e. should no longer be ",(0,o.jsx)(n.code,{children:"display: none"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:".open"}),": added to trigger transitions or animations from initial invisible state to visible state"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:".loading"}),": added when operation in ",(0,o.jsx)(n.code,{children:"onCommit"})," is in progress (since v0.4.4)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:".closing"}),": added when the dialog started to close; dialog will be destroyed until all transitions or animations triggered by the class has ended"]}),"\n"]})]})}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(i,e)})):i(e)}}}]);