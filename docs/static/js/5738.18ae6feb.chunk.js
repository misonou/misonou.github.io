"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[5738],{5738:function(e,n,r){r.r(n);var o=r(2556);function t(e){const n=Object.assign({h1:"h1",p:"p",a:"a",code:"code",pre:"pre",blockquote:"blockquote",strong:"strong",h2:"h2"},e.components),{Module:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r,{name:"brew-js-react"}),"\n",(0,o.jsx)(n.h1,{children:"Rendering links"}),"\n",(0,o.jsxs)(n.p,{children:["Links to different view can be generated by ",(0,o.jsx)(n.a,{href:":",children:(0,o.jsx)(n.code,{children:"linkTo"})})," function:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"/// Component.tsx\r\nimport { linkTo } from \"brew-js-react\";\r\nimport { Home } from \"./views\";\r\n\r\nfunction Component() {\r\n    return (\r\n        <a href={linkTo(Home)}>Home</a>;\r\n    );\r\n}\r\n\r\n/// views.ts\r\nexport const Home = registerView(\r\n    () => import('./views/HomeImpl'), \r\n    { view: 'home' });\r\n\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Important:"})," Note that the view component parsed to ",(0,o.jsx)(n.a,{href:":",children:(0,o.jsx)(n.code,{children:"linkTo"})})," should be the one returned by ",(0,o.jsx)(n.a,{href:":",children:(0,o.jsx)(n.code,{children:"registerView"})}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"The link is formatted such that when user open the link in new tab, the router in new page will be able to resume to correct view."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{children:"Passing route parameters"}),"\n",(0,o.jsx)(n.p,{children:"Additional route parameters can be passed and be included in the generated path according to router settings:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"/// Component.tsx\r\nimport { linkTo } from \"brew-js-react\";\r\nimport { ProductInfo } from \"./views\";\r\n\r\nfunction Component() {\r\n    // will render link with \"/product/5\"\r\n    return (\r\n        <a href={linkTo(ProductInfo, { id: 5 })}>Product 5</a>;\r\n    );\r\n}\r\n\r\n/// views.ts\r\nexport const ProductInfo = registerView(\r\n    () => import('./views/ProductInfoImpl'), \r\n    { view: 'product', id: /.*/ });\r\n\r\n/// app.ts\r\nbrew.with(router)(app => {\r\n    app.useRouter({\r\n        routes: [\r\n            '/{view:product}/{id}',\r\n            ...\r\n        ]\r\n    })\r\n});\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In actual product info component, the ",(0,o.jsx)(n.code,{children:"id"})," parameter can be retrieved by ",(0,o.jsx)(n.code,{children:"useRouteParam"})," hook:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// in ./views/ProductInfoImpl\r\nexport default function ProductInfoImpl() {\r\n    const id = useRouteParam('id');\r\n    /* ... */\r\n}\n"})})]})}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(t,e)})):t(e)}}}]);