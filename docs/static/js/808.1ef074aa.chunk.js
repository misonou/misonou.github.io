"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[808],{808:function(e,r,n){n.r(r);var o=n(2556);function t(e){const r=Object.assign({h1:"h1",del:"del",p:"p",code:"code",pre:"pre",blockquote:"blockquote",strong:"strong"},e.components),{Module:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n,{name:"brew-js-react"}),"\n",(0,o.jsxs)(r.h1,{children:["Error view ",(0,o.jsx)(r.del,{children:"v0.3.1"})]}),"\n",(0,o.jsx)(r.p,{children:"View container itself is an error boundary. That means when view component failed to render, only content in view container is cleared."}),"\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.code,{children:"registerErrorView"})," allows a default view to be rendered when view component failed to render."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-tsx",children:'import { registerErrorView } from "brew-js-react";\r\n\r\nregisterErrorView(({ error, reset }) => (\r\n    return (\r\n        <div>\r\n            <p>Oops!</p>\r\n            <button onClick={reset}>Reload page</button>\r\n        </div>\r\n    );\r\n));\n'})}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsxs)(r.p,{children:[(0,o.jsx)(r.strong,{children:"Important:"})," Note that error view should be used as the last resort to display message to user and allow recovery. Expected application errors should be handled gracefully in view components."]}),"\n"]})]})}r.default=function(e={}){const{wrapper:r}=e.components||{};return r?(0,o.jsx)(r,Object.assign({},e,{children:(0,o.jsx)(t,e)})):t(e)}}}]);