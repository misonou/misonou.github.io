"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[4230],{4230:function(e,i,r){r.r(i);var n=r(2556);function l(e){const i=Object.assign({h1:"h1",p:"p",h2:"h2",h3:"h3",code:"code",a:"a",ul:"ul",li:"li",strong:"strong"},e.components),{Module:r,MemberList:l,VersionTimeline:d}=i;return l||s("MemberList",!0),r||s("Module",!0),d||s("VersionTimeline",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r,{name:"zeta-dom-react"}),"\n",(0,n.jsx)(i.h1,{children:"FormFieldProps interface"}),"\n",(0,n.jsx)(i.p,{children:"Provides a common interface for interacting with field controls."}),"\n",(0,n.jsx)(l,{i:"FormFieldProps",ip:["name","label","value","required","disabled","error","showErrorMessage","validateOnChange","clearWhenUnmount","isEmpty","onValidate","onChange","formatError"]}),"\n",(0,n.jsx)(i.h2,{children:"Instance properties"}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.name"})}),"\n",(0,n.jsxs)(i.p,{children:["Specifies field name.\r\nWhen specified, and if there exists a form context, the field value\r\nwill be reflected on ",(0,n.jsx)(i.code,{children:"data"}),"."]}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.label"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies field label."}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.value"})}),"\n",(0,n.jsxs)(i.p,{children:["Specifies field value explicitly.\r\nThe supplied value will be reflected on ",(0,n.jsx)(i.code,{children:"data"})," if there is a parent form context\r\nand field name is specified."]}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.required"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies whether the field is required.\r\nA required field will be invalid if the field is empty."}),"\n",(0,n.jsxs)(i.p,{children:["By default, the field is considered empty when the field value is ",(0,n.jsx)(i.code,{children:"null"}),", ",(0,n.jsx)(i.code,{children:"undefined"}),",\r\nan empty string, or an empty array (for multi-valued field). The default behavior can be either\r\noverriden by specifying callback through the ",(0,n.jsx)(i.code,{children:"isEmpty"})," option;\r\nor the field type being passed to ",(0,n.jsx)(i.a,{href:":",children:(0,n.jsx)(i.code,{children:"useFormField"})})," has a custom ",(0,n.jsx)(i.code,{children:"isEmpty"})," callback."]}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.disabled"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies whether the field is disabled.\r\nA disabled field will not be validated against and is always valid."}),"\n",(0,n.jsxs)(i.p,{children:["Component using the ",(0,n.jsx)(i.a,{href:":",children:(0,n.jsx)(i.code,{children:"useFormField"})})," hook should handle the\r\nvisual clues and responsiveness to users on whether the field is disabled."]}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.error"})}),"\n",(0,n.jsxs)(i.p,{children:["Specifies validation error explicitly.\r\nFalsy values like ",(0,n.jsx)(i.code,{children:"null"}),", ",(0,n.jsx)(i.code,{children:"undefined"})," or empty string indicates the field is valid."]}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.showErrorMessage"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies whether the error message should be shown if the field is in invalid state."}),"\n",(0,n.jsxs)(i.p,{children:["Component using the ",(0,n.jsx)(i.a,{href:":",children:(0,n.jsx)(i.code,{children:"useFormField"})})," hook should handle this flag."]}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.validateOnChange"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies whether the value should be validated upon value changes."}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.clearWhenUnmount"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies whether the associated value on form data object will be deleted\r\nwhen the field component is unmounted."}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.isEmpty"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies a custom handler to determine if the field is empty."}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.onValidate"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies validation handler."}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.onChange"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies a callback to be invoked with the current value upon changes."}),"\n",(0,n.jsx)(i.h3,{children:(0,n.jsx)(i.code,{children:"FormFieldProps.formatError"})}),"\n",(0,n.jsx)(i.p,{children:"Specifies a callback to generate custom error message for this particular field."}),"\n",(0,n.jsxs)(i.p,{children:["The first argument will be the ",(0,n.jsx)(i.a,{href:":",children:(0,n.jsx)(i.code,{children:"ValidationError"})})," instance returned from validation callback.\r\nNote that the callback will not be invoked for values other than ",(0,n.jsx)(i.a,{href:":",children:(0,n.jsx)(i.code,{children:"ValidationError"})}),"."]}),"\n",(0,n.jsx)(i.h2,{children:"Version information"}),"\n",(0,n.jsx)(d,{module:"zeta-dom-react",children:(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"0.1.0"})," Introduced"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"0.1.5"})," ",(0,n.jsx)(i.code,{children:"FormFieldProps.required"}),(0,n.jsx)("br",{}),(0,n.jsx)(i.code,{children:"FormFieldProps.isEmpty()"})]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"0.1.8"})," Callback to ",(0,n.jsx)(i.code,{children:"FormFieldProps.onValidate()"})," receives third argument"]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"0.3.4"})," ",(0,n.jsx)(i.code,{children:"FormFieldProps.label"})]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.strong,{children:"0.3.6"})," ",(0,n.jsx)(i.code,{children:"FormFieldProps.clearWhenUnmount()"})]}),"\n"]})})]})}function s(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}i.default=function(e={}){const{wrapper:i}=e.components||{};return i?(0,n.jsx)(i,Object.assign({},e,{children:(0,n.jsx)(l,e)})):l(e)}}}]);