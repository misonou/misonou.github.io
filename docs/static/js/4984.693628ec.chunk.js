"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[4984],{4984:function(e,n,a){a.r(n);var t=a(2556);function i(e){const n=Object.assign({h1:"h1",p:"p",code:"code",a:"a",pre:"pre",h2:"h2",h3:"h3",blockquote:"blockquote"},e.components),{Module:a,MemberList:i,Badge:s}=n;return s||r("Badge",!1),s.ReadOnly||r("Badge.ReadOnly",!0),i||r("MemberList",!0),a||r("Module",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a,{name:"brew-js"}),"\n",(0,t.jsx)(n.h1,{children:"NavigateResult interface"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"NavigateResult"})," interface contains the outcome of ",(0,t.jsx)(n.a,{href:":",children:(0,t.jsx)(n.code,{children:"app.navigate"})})," if navigation is completed."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function onClick() {\r\n    app.navigate('/foo').then(result => { /* ... */ })\r\n}\n"})}),"\n",(0,t.jsx)(i,{i:"NavigateResult",ip:["id","path","navigated","redirected","originalPath"]}),"\n",(0,t.jsx)(n.h2,{children:"Properties"}),"\n",(0,t.jsxs)(n.h3,{children:[(0,t.jsx)(n.code,{children:"NavigateResult.id"})," ",(0,t.jsx)(s.ReadOnly,{})]}),"\n",(0,t.jsx)(n.p,{children:"A unique ID that can identify page load caused by navigation."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["This is the same unique ID that is set to ",(0,t.jsx)(n.code,{children:"history.state"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{children:[(0,t.jsx)(n.code,{children:"NavigateResult.path"})," ",(0,t.jsx)(s.ReadOnly,{})]}),"\n",(0,t.jsx)(n.p,{children:"Gets the path being navigated to."}),"\n",(0,t.jsx)(n.p,{children:"If redirection has occured, redirected path will be returned."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"app.on('navigate', e => {\r\n   if (e.newPathname === '/foo') {\r\n       return app.navigate('/bar', true);\r\n   }\r\n});\r\n\r\nconst { path } = await app.navigate('/foo');\r\nassert(path === '/bar');\n"})}),"\n",(0,t.jsxs)(n.h3,{children:[(0,t.jsx)(n.code,{children:"NavigateResult.navigated"})," ",(0,t.jsx)(s.ReadOnly,{})]}),"\n",(0,t.jsx)(n.p,{children:"Gets if navigation event has actually fired as caused a page load"}),"\n",(0,t.jsxs)(n.h3,{children:[(0,t.jsx)(n.code,{children:"NavigateResult.redirected"})," ",(0,t.jsx)(s.ReadOnly,{})]}),"\n",(0,t.jsx)(n.p,{children:"Gets if the app landed on current path through redirection."}),"\n",(0,t.jsxs)(n.h3,{children:[(0,t.jsx)(n.code,{children:"NavigateResult.originalPath"})," ",(0,t.jsx)(s.ReadOnly,{})]}),"\n",(0,t.jsxs)(n.p,{children:["Gets the original path that is passed to ",(0,t.jsx)(n.a,{href:":",children:(0,t.jsx)(n.code,{children:"app.navigate"})})," if it has been redirected."]})]})}function r(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(i,e)})):i(e)}}}]);