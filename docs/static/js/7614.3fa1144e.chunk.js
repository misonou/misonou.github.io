"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[7614],{7614:function(e,r,n){n.r(r);var s=n(2556);function i(e){const r=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",a:"a",ul:"ul",li:"li"},e.components),{Module:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n,{name:"zeta-dom-react"}),"\n",(0,s.jsx)(r.h1,{children:"Building form controls"}),"\n",(0,s.jsx)(r.p,{children:"The library does not ship built-in field components."}),"\n",(0,s.jsxs)(r.p,{children:["Instead, components are built using the ",(0,s.jsx)(r.code,{children:"useFormField"})," hook."]}),"\n",(0,s.jsxs)(r.p,{children:["The hook takes ",(0,s.jsx)(r.code,{children:"FormFieldProps<T>"})," as the first argument, where it looks for parent ",(0,s.jsx)(r.code,{children:"FormContext"})," instance visible in the context, and handles validations and as well as emitting events."]}),"\n",(0,s.jsx)(r.h2,{children:"Creating field component"}),"\n",(0,s.jsx)(r.p,{children:"Here is an example of a simple input box:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"function TextField(props: FormFieldProps<string>) {\r\n    const { value, error, setValue, elementRef } = useFormField(props, '');\r\n    return (\r\n        {/* Provider ref so that form.element() and form.focus() helper methods will work */}\r\n        <label ref={elementRef}>\r\n            <input name={props.name}\r\n                   value={value}\r\n                   disabled={!!props.disabled}\r\n                   onChange={e => setValue(e.target.value)} />\r\n            {error && props.showErrorMessage !== false &&\r\n                <div className=\"error\">{error}</div>}\r\n        </label>\r\n    );\r\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Value is updated through the ",(0,s.jsx)(r.code,{children:"setValue"})," dispatcher where it will trigger ",(0,s.jsx)(r.code,{children:"dataChange"})," and ",(0,s.jsx)(r.code,{children:"validate"})," events on the ",(0,s.jsx)(r.code,{children:"FormContext"})," instance."]}),"\n",(0,s.jsxs)(r.p,{children:["If ",(0,s.jsx)(r.code,{children:"props.onValidate"})," is supplied, validation are executed and result is populated to ",(0,s.jsx)(r.code,{children:"error"})," state."]}),"\n",(0,s.jsxs)(r.p,{children:["For some frequently used properties defined in ",(0,s.jsx)(r.code,{children:"FormFieldProps<T>"}),", it is up to your implemention on how to handle:"]}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Property"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"name"})}),(0,s.jsx)(r.td,{children:"Provide name to input element"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"label"})}),(0,s.jsx)(r.td,{children:"Field label"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"disabled"})}),(0,s.jsx)(r.td,{children:"Whether the input is disabled"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"required"})}),(0,s.jsx)(r.td,{children:"Whether the input is required"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"showErrorMessage"})}),(0,s.jsx)(r.td,{children:"Show error message"})]})]})]}),"\n",(0,s.jsx)(r.h2,{children:"Field validation"}),"\n",(0,s.jsxs)(r.p,{children:["By default ",(0,s.jsx)(r.code,{children:"useFormField"})," only checks for ",(0,s.jsx)(r.code,{children:"required"})," property. Any other validations have to be done through the ",(0,s.jsx)(r.code,{children:"onValidate"})," option."]}),"\n",(0,s.jsxs)(r.p,{children:["However, it is useful to validators activated through meaningful props instead of having to passing validator functions to ",(0,s.jsx)(r.code,{children:"onValidate"})," every time using the component."]}),"\n",(0,s.jsx)(r.p,{children:"For example, you might want these props available for a text field:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"interface TextFieldProps extends FormFieldProps<string> {\r\n    required?: boolean;\r\n    maxLength?: number;\r\n    pattern?: string;\r\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["See ",(0,s.jsx)(r.a,{href:"/docs/react/form/validators#s-parameterizing-validations",children:"Parameterizing validations"})," for more details."]}),"\n",(0,s.jsx)(r.h2,{children:"Examples"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/docs/react/form/field-types#TextField",children:"Text box"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/docs/react/form/field-types#MultiChoiceField",children:"Checkbox list"})}),"\n"]})]})}r.default=function(e={}){const{wrapper:r}=e.components||{};return r?(0,s.jsx)(r,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}}}]);
//# sourceMappingURL=7614.3fa1144e.chunk.js.map