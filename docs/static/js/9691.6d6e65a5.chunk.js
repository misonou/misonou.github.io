"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[9691],{9691:function(e,n,r){r.r(n);var s=r(2556);function t(e){const n=Object.assign({h1:"h1",h2:"h2",del:"del",h3:"h3",p:"p",code:"code",pre:"pre"},e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{children:"Upgrade guide"}),"\n",(0,s.jsxs)(n.h2,{children:["Upgrading to brew.js 0.6.x (Preview changes) ",(0,s.jsx)(n.del,{children:"brew-js"})]}),"\n",(0,s.jsx)(n.h3,{children:"Pure app event"}),"\n",(0,s.jsxs)(n.p,{children:["Event emitted to ",(0,s.jsx)(n.code,{children:"app"})," itself no longer emit to ",(0,s.jsx)(n.code,{children:"<html>"})," element."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"app.emit('event'); // this is treated as pure app event\r\n                   // only event handler registered as app.on('event', handler)\r\n                   // will receive pure app event\n"})}),"\n",(0,s.jsx)(n.p,{children:"I the event is intended to associates with the document root element, explicitly specifies as:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"app.emit('event', document.documentElement);\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Event listener registered to ",(0,s.jsx)(n.code,{children:"app"})," will still receive the event."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"app.on('event', () => {}); // this still works\n"})}),"\n",(0,s.jsx)(n.p,{children:"On the other hand, if you are listening pure app event with target set to, move the target:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// before\r\napp.on(document.documentElement, 'event', () => {});\r\n// after\r\napp.on('event', () => {});\n"})}),"\n",(0,s.jsxs)(n.h2,{children:["Upgrading to brew.js 0.4.x ",(0,s.jsx)(n.del,{children:"brew-js"})]}),"\n",(0,s.jsx)(n.h3,{children:"Feature moved to HtmlRouter"}),"\n",(0,s.jsxs)(n.p,{children:["When using router with html template, change to ",(0,s.jsx)(n.code,{children:"useHtmlRouter"}),"."]}),"\n",(0,s.jsx)(n.h3,{children:"Loading and error scope"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"loading"})," variable no longer automatically set when asynchronous operation is registered to DOM using ",(0,s.jsx)(n.code,{children:"notifyAsync"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Add ",(0,s.jsx)(n.code,{children:"loading-scope"})," to ",(0,s.jsx)(n.code,{children:"<html>"})," to enable it."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-htmlembedded!",children:'<html loading-scope set-class="{ loading: loading }">\r\n    ...\r\n</html>\n'})}),"\n",(0,s.jsxs)(n.h2,{children:["Upgrading to brew.js 0.3.x ",(0,s.jsx)(n.del,{children:"brew-js"})]}),"\n",(0,s.jsxs)(n.p,{children:["Starting v0.3, extensions must be loaded by ",(0,s.jsx)(n.code,{children:"brew.with"})," in order to use when using Webpack."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"brew.with(Router)(app => {\r\n});\n"})})]})}n.default=function(e={}){const{wrapper:n}=e.components||{};return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(t,e)})):t(e)}}}]);