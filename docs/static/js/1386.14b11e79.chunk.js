"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[1386],{1386:function(e,t,n){n.r(t);var r=n(2556);function s(e){const t=Object.assign({h1:"h1",p:"p",h2:"h2",pre:"pre",code:"code",del:"del",blockquote:"blockquote"},e.components),{Module:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n,{name:"brew-js-react"}),"\n",(0,r.jsx)(t.h1,{children:"Persist view state"}),"\n",(0,r.jsx)(t.p,{children:"The router implements view state mechanism. Therefore a view component can persist states when navigating different views."}),"\n",(0,r.jsx)(t.h2,{children:"useRouteState hook"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"function View() {\r\n    const [searchText, setSearchText] = useRouteState('searchText', '');\r\n    // ...\r\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["When user leave the current page and later navigate back, ",(0,r.jsx)(t.code,{children:"searchText"})," will be initialized with the last value set by ",(0,r.jsx)(t.code,{children:"setSearchText"}),"."]}),"\n",(0,r.jsx)(t.h2,{children:"Single view for different paths"}),"\n",(0,r.jsx)(t.p,{children:"It is common to display different content depending on current path using the same component."}),"\n",(0,r.jsxs)(t.p,{children:["For example, the page ",(0,r.jsx)(t.code,{children:"/products/1"})," and ",(0,r.jsx)(t.code,{children:"/products/2"})," may display detail of product with ID ",(0,r.jsx)(t.code,{children:"1"})," and ",(0,r.jsx)(t.code,{children:"2"})," respectively, using the same view component."]}),"\n",(0,r.jsxs)(t.p,{children:["If there are states isolated in different page that need to be persisted and restored in each page view, use the lower level ",(0,r.jsx)(t.code,{children:"useViewState"})," hook:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"function ProductInfo() {\r\n    const id = useRouteParam('id');\r\n    const viewState = useViewState('myViewState');\r\n    const [searchText, setSearchText] = useState(viewState.get() ?? '');\r\n\r\n    // store current search text in view state\r\n    // so that when navigating back the last search text is restored\r\n    viewState.set(searchText);\r\n\r\n    useEffect(() => {\r\n        return viewState.onPopState((prevState) => {\r\n            // callback will be called when navigation occurred\r\n            // and rendering this same view component\r\n            setSearchText(prevState ?? '');\r\n        });\r\n    }, [viewState]);\r\n\r\n    // ...\r\n}\n"})}),"\n",(0,r.jsxs)(t.h2,{children:["Snapshot internal states ",(0,r.jsx)(t.del,{children:"v0.3.3"})]}),"\n",(0,r.jsx)(t.p,{children:"The library provides mechanism to snapshot internal view state so that user can traverse between internal states using browser's back and forward function."}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"It is always preferrable to use route parameters if such state is better conceptualized as a page, so that user can access directly by different URL."}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"function Component() {\r\n    // pass `true` as third argument to enable snapshot\r\n    const [step, setStep] = useRouteState('step', 0, true);\r\n\r\n    // ...\r\n}\n"})})]})}t.default=function(e={}){const{wrapper:t}=e.components||{};return t?(0,r.jsx)(t,Object.assign({},e,{children:(0,r.jsx)(s,e)})):s(e)}}}]);