"use strict";(self.webpackChunkbrewjs_for_react_router_example=self.webpackChunkbrewjs_for_react_router_example||[]).push([[2741],{2741:function(e,n,r){r.r(n),r.d(n,{default:function(){return f}});var t=r(2556),o=r(9357),a=r(5222),s=function(){return s=Object.assign||function(e){for(var n,r=1,t=arguments.length;r<t;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},s.apply(this,arguments)};function c(){var e=(0,o.Gc)();return(0,t.jsxs)(o.l0,s({context:e},{children:[(0,t.jsxs)("p",{children:["Value is ",e.data.item||""]}),(0,t.jsx)(a.oi,{name:"item"})]}))}var i='import { Form, useFormContext } from "zeta-dom-react";\r\nimport { TextInput } from "src/components/controls";\r\n\r\nexport default function Component() {\r\n    const form = useFormContext();\r\n    return (\r\n        <Form context={form}>\r\n            <p>Value is {form.data.item || \'\'}</p>\r\n            <TextInput name="item" />\r\n        </Form>\r\n    );\r\n}\r\n',d=r(5337);function l(){return(0,t.jsx)(d.iV,{component:c,source:{tsx:i},maxHeight:"none"})}var m=function(){return m=Object.assign||function(e){for(var n,r=1,t=arguments.length;r<t;r++)for(var o in n=arguments[r])Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);return e},m.apply(this,arguments)};function p(){var e=(0,o.Gc)();return(0,t.jsxs)("div",m({className:"app-demo-form-col2"},{children:[(0,t.jsxs)(o.l0,m({context:e},{children:[(0,t.jsx)(a.oi,{name:"item",readOnly:!0}),(0,t.jsx)(a.zx,{label:"Add",onClick:function(){return e.data.item++}})]})),(0,t.jsx)(d.WN,{form:e})]}))}var u='import { Form, useFormContext } from "zeta-dom-react";\r\nimport { Button, TextInput } from "src/components/controls";\r\nimport { FormDataJsonView } from "src/components/docs";\r\n\r\nexport default function Component() {\r\n    const form = useFormContext();\r\n    return (\r\n        <div className="app-demo-form-col2">\r\n            <Form context={form}>\r\n                <TextInput name="item" readOnly />\r\n                <Button label="Add" onClick={() => form.data.item++} />\r\n            </Form>\r\n            <FormDataJsonView form={form} />\r\n        </div>\r\n    );\r\n}\r\n';function h(){return(0,t.jsx)(d.iV,{component:p,source:{tsx:u},maxHeight:"none"})}function x(e){const n=Object.assign({h1:"h1",p:"p",a:"a",code:"code",pre:"pre",blockquote:"blockquote",strong:"strong",h2:"h2"},e.components),{Module:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Module",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r,{name:"zeta-dom-react"}),"\n",(0,t.jsx)(n.h1,{children:"Accessing form data"}),"\n",(0,t.jsxs)(n.p,{children:["Field data is accessible by ",(0,t.jsx)(n.a,{href:":",children:(0,t.jsx)(n.code,{children:"FormContext.data"})})," property."]}),"\n",(0,t.jsx)(n.p,{children:"When using TypeScript, it can be benefited by specifying type argument for data shape:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'function Login() {\r\n    const form = useFormContext();\r\n    const onClick = () => {\r\n        // access field values through `FormContext.data`\r\n        login(form.data.username, form.data.password);\r\n    };\r\n\r\n    return (\r\n        <Form context={form}>\r\n            <TextInput name="username" required={true} label="Username" />\r\n            <TextInput name="password" required={true} type="password" label="Password" />\r\n            <Button label="Login" onClick={onClick} />\r\n        </Form>\r\n    );\r\n}\n'})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important"}),": To pass form data as a whole to consumer, it is recommended to use ",(0,t.jsx)(n.a,{href:":",children:(0,t.jsx)(n.code,{children:"FormContext.toJSON()"})})," to convert it to plain objects."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{children:"Effects on field update"}),"\n",(0,t.jsx)(n.p,{children:"Every time field value is updated, either programmatically or by user actions, re-rendering is triggered."}),"\n",(0,t.jsx)(n.p,{children:"In the following example, the paragraph will always show the entered text:"}),"\n",(0,t.jsx)(l,{}),"\n",(0,t.jsx)(n.h2,{children:"Detecting change of specific field"}),"\n",(0,t.jsxs)(n.p,{children:["For any comnponent that accepts ",(0,t.jsx)(n.a,{href:":",children:(0,t.jsx)(n.code,{children:"FormFieldProps"})}),", callback can be assigned to ",(0,t.jsx)(n.code,{children:"onChange"})," to listen\r\nchanges of that field:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<TextInput name="item" onChange={() => { /* ... */ }} />\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:":",children:(0,t.jsx)(n.code,{children:"FormContext"})})," object also provides ",(0,t.jsx)(n.code,{children:"dataChange"})," event if you needs logic depending on which fields were updated:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"useEffect(() => {\r\n    return form.on('dataChange', e => {\r\n        if (e.data.includes('item')) {\r\n            /* ... */\r\n        }\r\n    });\r\n}, []);\n"})}),"\n",(0,t.jsx)(n.h2,{children:"Updating form data"}),"\n",(0,t.jsxs)(n.p,{children:["Form data can be directly updated on ",(0,t.jsx)(n.a,{href:":",children:(0,t.jsx)(n.code,{children:"FormContext.data"})})," and they will be reflected on the rendered control:"]}),"\n",(0,t.jsx)(h,{}),"\n",(0,t.jsx)(n.h2,{children:"Data shape as interface"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:":",children:(0,t.jsx)(n.code,{children:"FormContext"})})," supports interface as type argument for the data shape, such that there will be type checking on accessing form data."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import { Form, useFormContext } from "zeta-dom-react";\r\n\r\ninterface FormData {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nfunction login(data: FormData) {\r\n    /* ... */\r\n}\r\n\r\nfunction Login() {\r\n    const form = useFormContext<FormData>();\r\n    return (\r\n        <Form context={form}>\r\n            <TextInput name="username" required label="Username" />\r\n            <TextInput name="password" required type="password" label="Password" />\r\n            <Button label="Login" onClick={() => login(form.toJSON())} />\r\n        </Form>\r\n    );\r\n}\n'})})]})}var f=function(e={}){const{wrapper:n}=e.components||{};return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(x,e)})):x(e)}}}]);